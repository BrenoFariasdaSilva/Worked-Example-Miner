diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/SessionTrackerImpl.java b/zookeeper/java/src/com/yahoo/zookeeper/server/SessionTrackerImpl.java
index 01ae1e22f..d9d0a4764 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/SessionTrackerImpl.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/SessionTrackerImpl.java
@@ -37,7 +37,8 @@ public class SessionTrackerImpl extends Thread implements SessionTracker {
     HashMap<Long, SessionSet> sessionSets = new HashMap<Long, SessionSet>();
 
     ConcurrentHashMap<Long, Integer> sessionsWithTimeout;
-
+    long nextSessionId = 0;
+    long serverId;
     long nextExpirationTime;
 
     int expirationInterval;
@@ -52,7 +53,14 @@ public static class Session {
 
         long sessionId;
     }
-
+    
+    public static long initializeNextSession(long id) {
+    	long nextSid = 0;
+    	nextSid = (System.currentTimeMillis() << 24) >> 8;
+    	nextSid =  nextSid | (id <<56);
+    	return nextSid;
+    }
+    
     static class SessionSet {
         long expireTime;
 
@@ -67,12 +75,14 @@ private long roundToInterval(long time) {
     }
 
     public SessionTrackerImpl(SessionExpirer expirer,
-            ConcurrentHashMap<Long, Integer> sessionsWithTimeout, int tickTime) {
+            ConcurrentHashMap<Long, Integer> sessionsWithTimeout, int tickTime, long sid) {
         super("SessionTracker");
         this.expirer = expirer;
         this.expirationInterval = tickTime;
         this.sessionsWithTimeout = sessionsWithTimeout;
         nextExpirationTime = roundToInterval(System.currentTimeMillis());
+        this.serverId = sid;
+        this.nextSessionId = initializeNextSession(sid);
         for (long id : sessionsWithTimeout.keySet()) {
             addSession(id, sessionsWithTimeout.get(id));
         }
@@ -174,8 +184,7 @@ public void shutdown() {
                 ZooLog.textTraceMask);
     }
 
-    long nextSessionId = System.currentTimeMillis() << 24;
-
+   
     synchronized public long createSession(int sessionTimeout) {
         addSession(nextSessionId, sessionTimeout);
         return nextSessionId++;
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/ZooKeeperServer.java b/zookeeper/java/src/com/yahoo/zookeeper/server/ZooKeeperServer.java
index 5f7b2c94e..2a5c635e3 100755
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/ZooKeeperServer.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/ZooKeeperServer.java
@@ -69,7 +69,7 @@
  * PrepRequestProcessor -> SyncRequestProcessor -> FinalRequestProcessor
  */
 public class ZooKeeperServer implements SessionExpirer {
-    int tickTime = 3000;
+    protected int tickTime = 3000;
 
     HashMap<String, AuthenticationProvider> authenticationProviders = new HashMap<String, AuthenticationProvider>();
 
@@ -516,7 +516,7 @@ protected void setupRequestProcessors() {
 
     protected void createSessionTracker() {
         sessionTracker = new SessionTrackerImpl(this, sessionsWithTimeouts,
-                tickTime);
+                tickTime, 1);
     }
 
     protected boolean running;
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerSessionTracker.java b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerSessionTracker.java
index bad4f3b85..48596ba93 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerSessionTracker.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerSessionTracker.java
@@ -21,6 +21,7 @@
 
 import com.yahoo.zookeeper.KeeperException;
 import com.yahoo.zookeeper.server.SessionTracker;
+import com.yahoo.zookeeper.server.SessionTrackerImpl;
 
 /**
  * This is really just a shell of a SessionTracker that tracks session activity
@@ -30,17 +31,22 @@ public class FollowerSessionTracker implements SessionTracker {
     SessionExpirer expirer;
 
     HashMap<Long, Integer> touchTable = new HashMap<Long, Integer>();
-
+    long serverId = 1;
+    long nextSessionId=0;
+    
     private ConcurrentHashMap<Long, Integer> sessionsWithTimeouts;
 
+    
     /**
      * 
      */
     public FollowerSessionTracker(SessionExpirer expirer,
-            ConcurrentHashMap<Long, Integer> sessionsWithTimeouts) {
+            ConcurrentHashMap<Long, Integer> sessionsWithTimeouts, long id) {
         this.expirer = expirer;
         this.sessionsWithTimeouts = sessionsWithTimeouts;
-        nextSessionId ^= expirer.getServerId() << 24;
+        this.serverId = id;
+        nextSessionId = SessionTrackerImpl.initializeNextSession(this.serverId);
+        
     }
 
     synchronized public void removeSession(long sessionId) {
@@ -67,7 +73,6 @@ synchronized HashMap<Long, Integer> snapshot() {
         return oldTouchTable;
     }
 
-    long nextSessionId = System.currentTimeMillis() << 24;
 
     synchronized public long createSession(int sessionTimeout) {
         return (nextSessionId++);
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerZooKeeperServer.java b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerZooKeeperServer.java
index 9cb7fec83..830dd338c 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerZooKeeperServer.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerZooKeeperServer.java
@@ -60,7 +60,7 @@ class FollowerZooKeeperServer extends ZooKeeperServer {
     }
 
     protected void createSessionTracker() {
-        sessionTracker = new FollowerSessionTracker(this, sessionsWithTimeouts);
+        sessionTracker = new FollowerSessionTracker(this, sessionsWithTimeouts, this.serverId);
     }
 
     protected void setupRequestProcessors() {
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/LeaderZooKeeperServer.java b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/LeaderZooKeeperServer.java
index d2d9b9766..8d3fff99a 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/LeaderZooKeeperServer.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/LeaderZooKeeperServer.java
@@ -22,6 +22,7 @@
 import com.yahoo.zookeeper.server.FinalRequestProcessor;
 import com.yahoo.zookeeper.server.PrepRequestProcessor;
 import com.yahoo.zookeeper.server.RequestProcessor;
+import com.yahoo.zookeeper.server.SessionTrackerImpl;
 import com.yahoo.zookeeper.server.ZooKeeperServer;
 
 /**
@@ -65,6 +66,12 @@ public int getGlobalOutstandingLimit() {
         return super.getGlobalOutstandingLimit()
                 / (leader.self.quorumPeers.size() - 1);
     }
+    
+    protected void createSessionTracker() {
+        sessionTracker = new SessionTrackerImpl(this, sessionsWithTimeouts,
+                tickTime, this.serverId);
+    }
+
 
     public boolean touch(long sess, int to) {
         return sessionTracker.touchSession(sess, to);
