diff --git a/zookeeper/c/include/zookeeper.h b/zookeeper/c/include/zookeeper.h
index 03cef28a8..6c60d4da5 100644
--- a/zookeeper/c/include/zookeeper.h
+++ b/zookeeper/c/include/zookeeper.h
@@ -18,6 +18,7 @@
 #define ZOOKEEPER_H_
 
 #include <sys/time.h>
+#include <stdio.h>
 #include "recordio.h"
 #include "zookeeper.jute.h"
 
@@ -110,9 +111,6 @@ extern ZOOAPI const int PERM_ALL;
 extern ZOOAPI struct Id ANYONE_ID_UNSAFE;
 extern ZOOAPI struct Id AUTH_IDS;
 
-extern ZOOAPI struct ACL _OPEN_ACL_UNSAFE_ACL[];
-extern ZOOAPI struct ACL _READ_ACL_UNSAFE_ACL[];
-extern ZOOAPI struct ACL _CREATOR_ALL_ACL_ACL[];
 extern ZOOAPI struct ACL_vector OPEN_ACL_UNSAFE;
 extern ZOOAPI struct ACL_vector READ_ACL_UNSAFE;
 extern ZOOAPI struct ACL_vector CREATOR_ALL_ACL;
@@ -769,6 +767,15 @@ ZOOAPI int is_unrecoverable(zhandle_t *zh);
  */
 ZOOAPI void zoo_set_debug_level(ZooLogLevel logLevel);
 
+/**
+ * \brief sets the stream to be used by the library for logging 
+ * 
+ * The zookeeper library uses stderr as its default log stream. Application
+ * must make sure the stream is writable. Passing in NULL resets the stream 
+ * to its default value (stderr).
+ */
+ZOOAPI void zoo_set_log_stream(FILE* logStream);
+
 /**
  * \brief enable/disable quorum endpoint order randomization
  * 
diff --git a/zookeeper/c/src/zk_log.c b/zookeeper/c/src/zk_log.c
index 76e7e854f..aa41c4510 100644
--- a/zookeeper/c/src/zk_log.c
+++ b/zookeeper/c/src/zk_log.c
@@ -19,7 +19,6 @@
 #endif
 
 #include "zk_log.h"
-#include <stdio.h>
 #include <unistd.h>
 #include <stdarg.h>
 
@@ -76,6 +75,17 @@ char* get_format_log_buffer(){
 
 ZooLogLevel logLevel=LOG_LEVEL_INFO;
 
+static FILE* logStream=0;
+FILE* getLogStream(){
+    if(logStream==0)
+        logStream=stderr;
+    return logStream;
+}
+
+void zoo_set_log_stream(FILE* stream){
+    logStream=stream;
+}
+
 static const char* time_now(){
     struct timeval tv;
     char* now_str=get_time_buffer();
@@ -118,7 +128,7 @@ const char* format_log_message(const char* format,...)
     return buf;
 }
 
-void setCurrentLogLevel(ZooLogLevel level)
+void zoo_set_debug_level(ZooLogLevel level)
 {
     if(level==0){
         // disable logging (unit tests do this)
@@ -129,3 +139,4 @@ void setCurrentLogLevel(ZooLogLevel level)
     if(level>LOG_LEVEL_DEBUG)level=LOG_LEVEL_DEBUG;
     logLevel=level;
 }
+
diff --git a/zookeeper/c/src/zk_log.h b/zookeeper/c/src/zk_log.h
index be55465f3..65f2255e3 100644
--- a/zookeeper/c/src/zk_log.h
+++ b/zookeeper/c/src/zk_log.h
@@ -24,7 +24,7 @@ extern "C" {
 #endif
 
 extern ZOOAPI ZooLogLevel logLevel;
-#define LOGSTREAM stderr
+#define LOGSTREAM getLogStream()
 
 #define LOG_ERROR(x) if(logLevel>=LOG_LEVEL_ERROR) \
     log_message(LOG_LEVEL_ERROR,__LINE__,__func__,format_log_message x)
@@ -35,13 +35,13 @@ extern ZOOAPI ZooLogLevel logLevel;
 #define LOG_DEBUG(x) if(logLevel==LOG_LEVEL_DEBUG) \
     log_message(LOG_LEVEL_DEBUG,__LINE__,__func__,format_log_message x)
 
-void setCurrentLogLevel(ZooLogLevel level);
-
 void log_message(ZooLogLevel curLevel, int line,const char* funcName,
     const char* message);
 
 const char* format_log_message(const char* format,...);
 
+FILE* getLogStream();
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/zookeeper/c/src/zookeeper.c b/zookeeper/c/src/zookeeper.c
index 002c71f5a..27d7de0bf 100644
--- a/zookeeper/c/src/zookeeper.c
+++ b/zookeeper/c/src/zookeeper.c
@@ -104,12 +104,12 @@ const int PERM_WRITE = 1 << 1;
 const int PERM_CREATE = 1 << 2;
 const int PERM_DELETE = 1 << 3;
 const int PERM_ADMIN = 1 << 4;
-const int PERM_ALL = 0x3f;
+const int PERM_ALL = 0x1f;
 struct Id ANYONE_ID_UNSAFE = {"world", "anyone"};
 struct Id AUTH_IDS = {"auth", ""};
-struct ACL _OPEN_ACL_UNSAFE_ACL[] = {{0x1f, {"world", "anyone"}}};
-struct ACL _READ_ACL_UNSAFE_ACL[] = {{0x1f, {"world", "anyone"}}};
-struct ACL _CREATOR_ALL_ACL_ACL[] = {{0x1f, {"auth", ""}}};
+static struct ACL _OPEN_ACL_UNSAFE_ACL[] = {{0x1f, {"world", "anyone"}}};
+static struct ACL _READ_ACL_UNSAFE_ACL[] = {{0x01, {"world", "anyone"}}};
+static struct ACL _CREATOR_ALL_ACL_ACL[] = {{0x1f, {"auth", ""}}};
 struct ACL_vector OPEN_ACL_UNSAFE = { 1, _OPEN_ACL_UNSAFE_ACL};
 struct ACL_vector READ_ACL_UNSAFE = { 1, _READ_ACL_UNSAFE_ACL};
 struct ACL_vector CREATOR_ALL_ACL = { 1, _CREATOR_ALL_ACL_ACL};
@@ -955,8 +955,8 @@ static struct timeval get_timeval(int interval)
                     LOG_ERROR(("failed to marchall request (zk retcode=%d)",rc));
                     return api_epilog(zh,ZMARSHALLINGERROR);
                 }
-                LOG_DEBUG(("Sending PING to %s (exceeded idle by %dms)",
-                	format_current_endpoint_info(zh),-to));
+//                LOG_DEBUG(("Sending PING to %s (exceeded idle by %dms)",
+//                	format_current_endpoint_info(zh),-to));
                 to = zh->recv_timeout/3;
             }
 		} else {
@@ -1955,11 +1955,6 @@ static const char* format_current_endpoint_info(zhandle_t* zh)
     return format_endpoint_info(&zh->addrs[zh->connect_index]);
 }
 
-void zoo_set_debug_level(ZooLogLevel level)
-{
-    setCurrentLogLevel(level);
-}
-
 void zoo_deterministic_conn_order(int yesOrNo)
 {
     disable_conn_permute=yesOrNo;
