diff --git a/zookeeper/c/ChangeLog b/zookeeper/c/ChangeLog
new file mode 100644
index 000000000..0e0c0a059
--- /dev/null
+++ b/zookeeper/c/ChangeLog
@@ -0,0 +1,8 @@
+2007-11-27 Andrew Kornev <akornev@users.sourceforge.net>
+
+	* configure.ac and Makefile.am added support for GNU autotools
+	
+	* recordio.c/.h updated jute IO routines to use bit-explicit integer types
+	  (int32_t vs. int, and int64_t vs. long long)
+	  
+	* README rough draft
\ No newline at end of file
diff --git a/zookeeper/c/INSTALL b/zookeeper/c/INSTALL
new file mode 100644
index 000000000..5458714e1
--- /dev/null
+++ b/zookeeper/c/INSTALL
@@ -0,0 +1,234 @@
+Installation Instructions
+*************************
+
+Copyright (C) 1994, 1995, 1996, 1999, 2000, 2001, 2002, 2004, 2005,
+2006 Free Software Foundation, Inc.
+
+This file is free documentation; the Free Software Foundation gives
+unlimited permission to copy, distribute and modify it.
+
+Basic Installation
+==================
+
+Briefly, the shell commands `./configure; make; make install' should
+configure, build, and install this package.  The following
+more-detailed instructions are generic; see the `README' file for
+instructions specific to this package.
+
+   The `configure' shell script attempts to guess correct values for
+various system-dependent variables used during compilation.  It uses
+those values to create a `Makefile' in each directory of the package.
+It may also create one or more `.h' files containing system-dependent
+definitions.  Finally, it creates a shell script `config.status' that
+you can run in the future to recreate the current configuration, and a
+file `config.log' containing compiler output (useful mainly for
+debugging `configure').
+
+   It can also use an optional file (typically called `config.cache'
+and enabled with `--cache-file=config.cache' or simply `-C') that saves
+the results of its tests to speed up reconfiguring.  Caching is
+disabled by default to prevent problems with accidental use of stale
+cache files.
+
+   If you need to do unusual things to compile the package, please try
+to figure out how `configure' could check whether to do them, and mail
+diffs or instructions to the address given in the `README' so they can
+be considered for the next release.  If you are using the cache, and at
+some point `config.cache' contains results you don't want to keep, you
+may remove or edit it.
+
+   The file `configure.ac' (or `configure.in') is used to create
+`configure' by a program called `autoconf'.  You need `configure.ac' if
+you want to change it or regenerate `configure' using a newer version
+of `autoconf'.
+
+The simplest way to compile this package is:
+
+  1. `cd' to the directory containing the package's source code and type
+     `./configure' to configure the package for your system.
+
+     Running `configure' might take a while.  While running, it prints
+     some messages telling which features it is checking for.
+
+  2. Type `make' to compile the package.
+
+  3. Optionally, type `make check' to run any self-tests that come with
+     the package.
+
+  4. Type `make install' to install the programs and any data files and
+     documentation.
+
+  5. You can remove the program binaries and object files from the
+     source code directory by typing `make clean'.  To also remove the
+     files that `configure' created (so you can compile the package for
+     a different kind of computer), type `make distclean'.  There is
+     also a `make maintainer-clean' target, but that is intended mainly
+     for the package's developers.  If you use it, you may have to get
+     all sorts of other programs in order to regenerate files that came
+     with the distribution.
+
+Compilers and Options
+=====================
+
+Some systems require unusual options for compilation or linking that the
+`configure' script does not know about.  Run `./configure --help' for
+details on some of the pertinent environment variables.
+
+   You can give `configure' initial values for configuration parameters
+by setting variables in the command line or in the environment.  Here
+is an example:
+
+     ./configure CC=c99 CFLAGS=-g LIBS=-lposix
+
+   *Note Defining Variables::, for more details.
+
+Compiling For Multiple Architectures
+====================================
+
+You can compile the package for more than one kind of computer at the
+same time, by placing the object files for each architecture in their
+own directory.  To do this, you can use GNU `make'.  `cd' to the
+directory where you want the object files and executables to go and run
+the `configure' script.  `configure' automatically checks for the
+source code in the directory that `configure' is in and in `..'.
+
+   With a non-GNU `make', it is safer to compile the package for one
+architecture at a time in the source code directory.  After you have
+installed the package for one architecture, use `make distclean' before
+reconfiguring for another architecture.
+
+Installation Names
+==================
+
+By default, `make install' installs the package's commands under
+`/usr/local/bin', include files under `/usr/local/include', etc.  You
+can specify an installation prefix other than `/usr/local' by giving
+`configure' the option `--prefix=PREFIX'.
+
+   You can specify separate installation prefixes for
+architecture-specific files and architecture-independent files.  If you
+pass the option `--exec-prefix=PREFIX' to `configure', the package uses
+PREFIX as the prefix for installing programs and libraries.
+Documentation and other data files still use the regular prefix.
+
+   In addition, if you use an unusual directory layout you can give
+options like `--bindir=DIR' to specify different values for particular
+kinds of files.  Run `configure --help' for a list of the directories
+you can set and what kinds of files go in them.
+
+   If the package supports it, you can cause programs to be installed
+with an extra prefix or suffix on their names by giving `configure' the
+option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.
+
+Optional Features
+=================
+
+Some packages pay attention to `--enable-FEATURE' options to
+`configure', where FEATURE indicates an optional part of the package.
+They may also pay attention to `--with-PACKAGE' options, where PACKAGE
+is something like `gnu-as' or `x' (for the X Window System).  The
+`README' should mention any `--enable-' and `--with-' options that the
+package recognizes.
+
+   For packages that use the X Window System, `configure' can usually
+find the X include and library files automatically, but if it doesn't,
+you can use the `configure' options `--x-includes=DIR' and
+`--x-libraries=DIR' to specify their locations.
+
+Specifying the System Type
+==========================
+
+There may be some features `configure' cannot figure out automatically,
+but needs to determine by the type of machine the package will run on.
+Usually, assuming the package is built to be run on the _same_
+architectures, `configure' can figure that out, but if it prints a
+message saying it cannot guess the machine type, give it the
+`--build=TYPE' option.  TYPE can either be a short name for the system
+type, such as `sun4', or a canonical name which has the form:
+
+     CPU-COMPANY-SYSTEM
+
+where SYSTEM can have one of these forms:
+
+     OS KERNEL-OS
+
+   See the file `config.sub' for the possible values of each field.  If
+`config.sub' isn't included in this package, then this package doesn't
+need to know the machine type.
+
+   If you are _building_ compiler tools for cross-compiling, you should
+use the option `--target=TYPE' to select the type of system they will
+produce code for.
+
+   If you want to _use_ a cross compiler, that generates code for a
+platform different from the build platform, you should specify the
+"host" platform (i.e., that on which the generated programs will
+eventually be run) with `--host=TYPE'.
+
+Sharing Defaults
+================
+
+If you want to set default values for `configure' scripts to share, you
+can create a site shell script called `config.site' that gives default
+values for variables like `CC', `cache_file', and `prefix'.
+`configure' looks for `PREFIX/share/config.site' if it exists, then
+`PREFIX/etc/config.site' if it exists.  Or, you can set the
+`CONFIG_SITE' environment variable to the location of the site script.
+A warning: not all `configure' scripts look for a site script.
+
+Defining Variables
+==================
+
+Variables not defined in a site shell script can be set in the
+environment passed to `configure'.  However, some packages may run
+configure again during the build, and the customized values of these
+variables may be lost.  In order to avoid this problem, you should set
+them in the `configure' command line, using `VAR=value'.  For example:
+
+     ./configure CC=/usr/local2/bin/gcc
+
+causes the specified `gcc' to be used as the C compiler (unless it is
+overridden in the site shell script).
+
+Unfortunately, this technique does not work for `CONFIG_SHELL' due to
+an Autoconf bug.  Until the bug is fixed you can use this workaround:
+
+     CONFIG_SHELL=/bin/bash /bin/bash ./configure CONFIG_SHELL=/bin/bash
+
+`configure' Invocation
+======================
+
+`configure' recognizes the following options to control how it operates.
+
+`--help'
+`-h'
+     Print a summary of the options to `configure', and exit.
+
+`--version'
+`-V'
+     Print the version of Autoconf used to generate the `configure'
+     script, and exit.
+
+`--cache-file=FILE'
+     Enable the cache: use and save the results of the tests in FILE,
+     traditionally `config.cache'.  FILE defaults to `/dev/null' to
+     disable caching.
+
+`--config-cache'
+`-C'
+     Alias for `--cache-file=config.cache'.
+
+`--quiet'
+`--silent'
+`-q'
+     Do not print messages saying which checks are being made.  To
+     suppress all normal output, redirect it to `/dev/null' (any error
+     messages will still be shown).
+
+`--srcdir=DIR'
+     Look for the package's source code in directory DIR.  Usually
+     `configure' can determine that directory automatically.
+
+`configure' also accepts some other, not widely useful, options.  Run
+`configure --help' for more details.
+
diff --git a/zookeeper/c/Makefile.am b/zookeeper/c/Makefile.am
new file mode 100644
index 000000000..5e4ad7d24
--- /dev/null
+++ b/zookeeper/c/Makefile.am
@@ -0,0 +1,35 @@
+
+AM_CPPFLAGS = -Iinclude -Igenerated
+AM_CFLAGS = -Wall -Werror
+
+LIB_LDFLAGS = -no-undefined -version-info 1
+
+pkginclude_HEADERS = include/zookeeper.h include/recordio.h generated/zookeeper.jute.h
+
+lib_LTLIBRARIES = libzookeeper_st.la
+
+COMMON_SRC = src/zookeeper.c include/zookeeper.h \
+	src/recordio.c include/recordio.h include/proto.h \
+	src/zk_adaptor.h generated/zookeeper.jute.c
+	
+libzookeeper_st_la_SOURCES = $(COMMON_SRC) src/st_adaptor.c
+libzookeeper_st_la_LDFLAGS = $(LIB_LDFLAGS)
+
+if WANT_SYNCAPI
+lib_LTLIBRARIES += libzookeeper_mt.la
+libzookeeper_mt_la_SOURCES = $(COMMON_SRC) src/mt_adaptor.c
+libzookeeper_mt_la_CFLAGS = -DTHREADED
+libzookeeper_mt_la_LDFLAGS = $(LIB_LDFLAGS) -lpthread
+endif
+
+bin_PROGRAMS = cli_st
+
+cli_st_SOURCES = src/cli.c
+cli_st_LDADD = libzookeeper_st.la
+
+if WANT_SYNCAPI
+bin_PROGRAMS += cli_mt
+cli_mt_SOURCES = src/cli.c
+cli_mt_LDADD = libzookeeper_mt.la
+cli_mt_CFLAGS = -DTHREADED
+endif
diff --git a/zookeeper/c/README b/zookeeper/c/README
new file mode 100644
index 000000000..c34e99e5f
--- /dev/null
+++ b/zookeeper/c/README
@@ -0,0 +1,83 @@
+                     Zookeeper C client library 
+
+
+This package provides a C client interface to Zookeeper server. For general
+information about Zookeeper please see http://zookeeper.wiki.sourceforge.net/.
+The homepage for this project is http://sourceforge.net/projects/zookeeper/.
+
+
+OVERVIEW
+
+The client supports two types of APIs -- synchronous and asynchronous.
+
+Asynchronous API provides non-blocking operations with completion callbacks and 
+relies on the application to implement event multiplexing on its behalf.
+
+On the other hand, Synchronous API provides a blocking flavor of zookeeper operations 
+and runs its own event loop in a separate thread.
+
+Sync and Async APIs can be mixed and matched within the same application.
+
+The package includes two shared libraries: zookeeper_st and zookeeper_mt. The former
+only provides the Async API and is not thread-safe. The only reason this library
+exists is to support the platforms were pthread library is not available or not stable
+enough (i.e. FreeBSD 4.x). In all other cases the applications will be better off by
+linking against zookeeper_mt as it includes support both Sync and Async API.
+
+
+INSTALLATION
+
+If you're building the client from a check-out from SourceForge repository, you
+need to
+1) do a "ant compile_jute" from the zookeeper top level directory (.../trunk/zookeeper).
+   This will create a directory named "generated" under zookeeper/c. 
+2) change directory to the zookeeper/c and do a "auroreconf -i" to bootstrap 
+   autoconf, automake and libtool. Please make sure you have autoconf version 2.59
+   or greater installed.
+3) do a "./configure [OPTIONS]" to generate the makefile. See INSTALL for general information
+   about running configure. Additionally, the configure supports the following options:
+   --enable-debug     enables optimization and enables debug info compiler options,
+                      disabled by default
+   --without-syncapi  disables Sync API support; zookeeper_mt library won't be built,
+                      enabled by default
+   --disable-static   do not build static libraries, enabled by default
+   --disable-shared   do not build shared libraries, enabled by default
+4) do a "make" or "make install" to build the libraries and install them.
+ 
+
+USING THE CLIENT
+
+You can test your client by running a zookeeper server (see instructions on 
+the project wiki page on how to run it) and connecting to it using one of 
+the cli applications that were built as part of the installation procedure.
+cli_mt (multithreaded, built against zookeeper_mt library) is shown in this example, 
+but you could also use cli_st (singlethreaded, built against zookeeper_st library):
+
+$ cli_mt zookeeper_host:9876
+
+This is a client application that gives you a shell for executing simple zookeeper
+command. Once succesully started and connected to the server it displays a shell prompt. 
+You can now enter zookeeper commands. For example, to create a node:
+
+> create /my_new_node
+
+To verify that the node's been created:
+
+> ls /
+
+You should see a list of node who are children of the root node "/".
+(TODO: document all the cli commands)
+
+In order to be able to use the zookeeper API in your application you have to
+1) remember to include zookeeper header 
+   #include <zookeeper/zookeeper.h>
+2) use -DTHREADED compiler option to enable Sync API; in this case you should
+   be linking your code against zookeeper_mt library
+
+Please take a look at cli.c to understand how to use the two API types. 
+(TODO: some kind of short tutorial would be helpful, I guess)
+
+
+SUPPORT
+
+For questions, please email <zookeeper-user@lists.sourceforge.net>
\ No newline at end of file
diff --git a/zookeeper/c/configure.ac b/zookeeper/c/configure.ac
new file mode 100644
index 000000000..2588ad096
--- /dev/null
+++ b/zookeeper/c/configure.ac
@@ -0,0 +1,67 @@
+#                                               -*- Autoconf -*-
+# Process this file with autoconf to produce a configure script.
+
+AC_PREREQ(2.59)
+
+AC_INIT([zookeeper C client],1.0,[zookeeper-user@lists.sourceforge.net],[zookeeper])
+AC_CONFIG_SRCDIR([src/zookeeper.c])
+AC_CHECK_FILES([generated/zookeeper.jute.c generated/zookeeper.jute.h],[],
+	[AC_MSG_ERROR([jute files are missing! Please run "ant compile_jute" while in the zookeeper top level directory.])
+])
+AM_INIT_AUTOMAKE([-Wall foreign])
+#AM_INIT_AUTOMAKE
+AC_CONFIG_HEADER([config.h])
+
+# Checks for programs.
+AC_PROG_CC
+AM_PROG_CC_C_O
+AC_PROG_INSTALL
+AC_PROG_LN_S
+
+# AC_DISABLE_SHARED
+AC_PROG_LIBTOOL
+
+AC_ARG_ENABLE([debug],
+ [AS_HELP_STRING([--enable-debug],[enable debug build [default=no]])],
+ [CFLAGS="-g -O0"],[CFLAGS="-O2"])
+
+AC_ARG_WITH([syncapi],
+ [AS_HELP_STRING([--with-syncapi],[build with support for SyncAPI [default=yes]])],
+ [],[with_syncapi=yes])
+
+# Checks for libraries.
+AC_CHECK_LIB([pthread], [pthread_mutex_lock],[have_pthread=yes],[have_pthread=no])
+
+if test "x$with_syncapi" != xno && test "x$have_pthread" = xno; then
+	AC_MSG_WARN([cannot build SyncAPI -- pthread not found])
+	with_syncapi=no
+fi
+if test "x$with_syncapi" != xno; then
+	AC_MSG_NOTICE([building with SyncAPI support])
+else
+	AC_MSG_NOTICE([building without SyncAPI support])
+fi
+
+AM_CONDITIONAL([WANT_SYNCAPI],[test "x$with_syncapi" != xno])
+
+# Checks for header files.
+AC_HEADER_STDC
+AC_CHECK_HEADERS([arpa/inet.h fcntl.h netdb.h netinet/in.h stdlib.h string.h sys/socket.h sys/time.h unistd.h])
+
+# Checks for typedefs, structures, and compiler characteristics.
+AC_C_CONST
+AC_C_INLINE
+#AC_TYPE_INT32_T -- this macro only available in autoconf 2.61
+#AC_TYPE_INT64_T -- this macro only available in autoconf 2.61
+AC_TYPE_PID_T
+AC_HEADER_TIME
+
+# Checks for library functions.
+AC_FUNC_MALLOC
+AC_FUNC_REALLOC
+AC_FUNC_SELECT_ARGTYPES
+AC_TYPE_SIGNAL
+AC_CHECK_FUNCS([gethostbyname gettimeofday memmove memset select socket strchr strdup strerror strtol])
+
+AC_CONFIG_FILES([Makefile])
+AC_OUTPUT
