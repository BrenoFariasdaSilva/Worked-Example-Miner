diff --git a/zookeeper/build.xml b/zookeeper/build.xml
index bfeaf388d..d1d786a6b 100644
--- a/zookeeper/build.xml
+++ b/zookeeper/build.xml
@@ -119,8 +119,8 @@
     <!-- ====================================================== -->
     <target name="clean">
         <delete dir="${build.dir}" />
-        <delete dir="${src_generated.dir}" />
-        <delete dir="${csrc_generated.dir}" />
+        <delete dir="${src_generated.dir}" />
+        <delete dir="${csrc_generated.dir}" />
         <delete file="${jar.name}" />
     </target>
 
diff --git a/zookeeper/c/ChangeLog b/zookeeper/c/ChangeLog
index 0513e9ed0..9e17ca631 100644
--- a/zookeeper/c/ChangeLog
+++ b/zookeeper/c/ChangeLog
@@ -1,9 +1,9 @@
-Release 1.0.0
-2007-11-27 Andrew Kornev <akornev@users.sourceforge.net>
-
-	* configure.ac and Makefile.am added support for GNU autotools
-	
-	* recordio.c/.h updated jute IO routines to use bit-explicit integer types
-	  (int32_t vs. int, and int64_t vs. long long)
-	  
+Release 1.0.0
+2007-11-27 Andrew Kornev <akornev@users.sourceforge.net>
+
+	* configure.ac and Makefile.am added support for GNU autotools
+	
+	* recordio.c/.h updated jute IO routines to use bit-explicit integer types
+	  (int32_t vs. int, and int64_t vs. long long)
+	  
 	* README rough draft
\ No newline at end of file
diff --git a/zookeeper/c/Makefile.am b/zookeeper/c/Makefile.am
index 0cb4478b7..fa9ea61e2 100644
--- a/zookeeper/c/Makefile.am
+++ b/zookeeper/c/Makefile.am
@@ -1,36 +1,36 @@
-
-AM_CPPFLAGS = -Iinclude -Igenerated
-AM_CFLAGS = -Wall -Werror
-
-LIB_LDFLAGS = -no-undefined -version-info 1
-
-pkginclude_HEADERS = include/zookeeper.h include/recordio.h generated/zookeeper.jute.h
-EXTRA_DIST=LICENSE
-
-lib_LTLIBRARIES = libzookeeper_st.la
-
-COMMON_SRC = src/zookeeper.c include/zookeeper.h \
-	src/recordio.c include/recordio.h include/proto.h \
-	src/zk_adaptor.h generated/zookeeper.jute.c
-	
-libzookeeper_st_la_SOURCES = $(COMMON_SRC) src/st_adaptor.c
-libzookeeper_st_la_LDFLAGS = $(LIB_LDFLAGS)
-
-if WANT_SYNCAPI
-lib_LTLIBRARIES += libzookeeper_mt.la
-libzookeeper_mt_la_SOURCES = $(COMMON_SRC) src/mt_adaptor.c
-libzookeeper_mt_la_CFLAGS = -DTHREADED
-libzookeeper_mt_la_LDFLAGS = $(LIB_LDFLAGS) -lpthread
-endif
-
-bin_PROGRAMS = cli_st
-
-cli_st_SOURCES = src/cli.c
-cli_st_LDADD = libzookeeper_st.la
-
-if WANT_SYNCAPI
-bin_PROGRAMS += cli_mt
-cli_mt_SOURCES = src/cli.c
-cli_mt_LDADD = libzookeeper_mt.la
-cli_mt_CFLAGS = -DTHREADED
-endif
+
+AM_CPPFLAGS = -Iinclude -Igenerated
+AM_CFLAGS = -Wall -Werror
+
+LIB_LDFLAGS = -no-undefined -version-info 1
+
+pkginclude_HEADERS = include/zookeeper.h include/recordio.h generated/zookeeper.jute.h
+EXTRA_DIST=LICENSE
+
+lib_LTLIBRARIES = libzookeeper_st.la
+
+COMMON_SRC = src/zookeeper.c include/zookeeper.h \
+	src/recordio.c include/recordio.h include/proto.h \
+	src/zk_adaptor.h generated/zookeeper.jute.c
+	
+libzookeeper_st_la_SOURCES = $(COMMON_SRC) src/st_adaptor.c
+libzookeeper_st_la_LDFLAGS = $(LIB_LDFLAGS)
+
+if WANT_SYNCAPI
+lib_LTLIBRARIES += libzookeeper_mt.la
+libzookeeper_mt_la_SOURCES = $(COMMON_SRC) src/mt_adaptor.c
+libzookeeper_mt_la_CFLAGS = -DTHREADED
+libzookeeper_mt_la_LDFLAGS = $(LIB_LDFLAGS) -lpthread
+endif
+
+bin_PROGRAMS = cli_st
+
+cli_st_SOURCES = src/cli.c
+cli_st_LDADD = libzookeeper_st.la
+
+if WANT_SYNCAPI
+bin_PROGRAMS += cli_mt
+cli_mt_SOURCES = src/cli.c
+cli_mt_LDADD = libzookeeper_mt.la
+cli_mt_CFLAGS = -DTHREADED
+endif
diff --git a/zookeeper/c/README b/zookeeper/c/README
index 6a57a826f..363cfdff4 100644
--- a/zookeeper/c/README
+++ b/zookeeper/c/README
@@ -1,86 +1,86 @@
-                     Zookeeper C client library 
-
-
-This package provides a C client interface to Zookeeper server. For general
-information about Zookeeper please see http://zookeeper.wiki.sourceforge.net/.
-The homepage for this project is http://sourceforge.net/projects/zookeeper/.
-
-
-OVERVIEW
-
-The client supports two types of APIs -- synchronous and asynchronous.
-
-Asynchronous API provides non-blocking operations with completion callbacks and 
-relies on the application to implement event multiplexing on its behalf.
-
-On the other hand, Synchronous API provides a blocking flavor of zookeeper operations 
-and runs its own event loop in a separate thread.
-
-Sync and Async APIs can be mixed and matched within the same application.
-
-The package includes two shared libraries: zookeeper_st and zookeeper_mt. The former
-only provides the Async API and is not thread-safe. The only reason this library
-exists is to support the platforms were pthread library is not available or unstable 
-(i.e. FreeBSD 4.x). In all other cases the application developers are advised to link
-against zookeeper_mt as it includes support for both Sync and Async API.
-
-
-INSTALLATION
-
-If you're building the client from a check-out from Source Forge repository, you
-need to follow the steps outlined below. If you're building from a project source package 
-downloaded from Source Forge please skip to step 3.
-1) do a "ant compile_jute" from the zookeeper top level directory (.../trunk/zookeeper).
-   This will create a directory named "generated" under zookeeper/c. 
-2) change directory to the zookeeper/c and do a "auroreconf -i" to bootstrap 
-   autoconf, automake and libtool. Please make sure you have autoconf version 2.59
-   or greater installed. Skip to step 4.
-3) unzip/untar the source tarball and cd to the zookeeper-x.x.x/ directory
-4) do a "./configure [OPTIONS]" to generate the makefile. See INSTALL for general 
-   information about running configure. Additionally, the configure supports 
-   the following options:
-   --enable-debug     enables optimization and enables debug info compiler options,
-                      disabled by default
-   --without-syncapi  disables Sync API support; zookeeper_mt library won't be built,
-                      enabled by default
-   --disable-static   do not build static libraries, enabled by default
-   --disable-shared   do not build shared libraries, enabled by default
-5) do a "make" or "make install" to build the libraries and install them.
- 
-
-USING THE CLIENT
-
-You can test your client by running a zookeeper server (see instructions on 
-the project wiki page on how to run it) and connecting to it using one of 
-the cli applications that were built as part of the installation procedure.
-cli_mt (multithreaded, built against zookeeper_mt library) is shown in this example, 
-but you could also use cli_st (singlethreaded, built against zookeeper_st library):
-
-$ cli_mt zookeeper_host:9876
-
-This is a client application that gives you a shell for executing simple zookeeper
-commands. Once succesully started and connected to the server it displays a shell prompt. 
-You can now enter zookeeper commands. For example, to create a node:
-
-> create /my_new_node
-
-To verify that the node's been created:
-
-> ls /
-
-You should see a list of node who are children of the root node "/".
-(TODO: document all the cli commands)
-
-In order to be able to use the zookeeper API in your application you have to
-1) remember to include zookeeper header 
-   #include <zookeeper/zookeeper.h>
-2) use -DTHREADED compiler option to enable Sync API; in this case you should
-   be linking your code against zookeeper_mt library
-
-Please take a look at cli.c to understand how to use the two API types. 
-(TODO: some kind of short tutorial would be helpful, I guess)
-
-
-SUPPORT
-
+                     Zookeeper C client library 
+
+
+This package provides a C client interface to Zookeeper server. For general
+information about Zookeeper please see http://zookeeper.wiki.sourceforge.net/.
+The homepage for this project is http://sourceforge.net/projects/zookeeper/.
+
+
+OVERVIEW
+
+The client supports two types of APIs -- synchronous and asynchronous.
+
+Asynchronous API provides non-blocking operations with completion callbacks and 
+relies on the application to implement event multiplexing on its behalf.
+
+On the other hand, Synchronous API provides a blocking flavor of zookeeper operations 
+and runs its own event loop in a separate thread.
+
+Sync and Async APIs can be mixed and matched within the same application.
+
+The package includes two shared libraries: zookeeper_st and zookeeper_mt. The former
+only provides the Async API and is not thread-safe. The only reason this library
+exists is to support the platforms were pthread library is not available or unstable 
+(i.e. FreeBSD 4.x). In all other cases the application developers are advised to link
+against zookeeper_mt as it includes support for both Sync and Async API.
+
+
+INSTALLATION
+
+If you're building the client from a check-out from Source Forge repository, you
+need to follow the steps outlined below. If you're building from a project source package 
+downloaded from Source Forge please skip to step 3.
+1) do a "ant compile_jute" from the zookeeper top level directory (.../trunk/zookeeper).
+   This will create a directory named "generated" under zookeeper/c. 
+2) change directory to the zookeeper/c and do a "autoreconf -i" to bootstrap 
+   autoconf, automake and libtool. Please make sure you have autoconf version 2.59
+   or greater installed. Skip to step 4.
+3) unzip/untar the source tarball and cd to the zookeeper-x.x.x/ directory
+4) do a "./configure [OPTIONS]" to generate the makefile. See INSTALL for general 
+   information about running configure. Additionally, the configure supports 
+   the following options:
+   --enable-debug     enables optimization and enables debug info compiler options,
+                      disabled by default
+   --without-syncapi  disables Sync API support; zookeeper_mt library won't be built,
+                      enabled by default
+   --disable-static   do not build static libraries, enabled by default
+   --disable-shared   do not build shared libraries, enabled by default
+5) do a "make" or "make install" to build the libraries and install them.
+ 
+
+USING THE CLIENT
+
+You can test your client by running a zookeeper server (see instructions on 
+the project wiki page on how to run it) and connecting to it using one of 
+the cli applications that were built as part of the installation procedure.
+cli_mt (multithreaded, built against zookeeper_mt library) is shown in this example, 
+but you could also use cli_st (singlethreaded, built against zookeeper_st library):
+
+$ cli_mt zookeeper_host:9876
+
+This is a client application that gives you a shell for executing simple zookeeper
+commands. Once succesully started and connected to the server it displays a shell prompt. 
+You can now enter zookeeper commands. For example, to create a node:
+
+> create /my_new_node
+
+To verify that the node's been created:
+
+> ls /
+
+You should see a list of node who are children of the root node "/".
+(TODO: document all the cli commands)
+
+In order to be able to use the zookeeper API in your application you have to
+1) remember to include zookeeper header 
+   #include <zookeeper/zookeeper.h>
+2) use -DTHREADED compiler option to enable Sync API; in this case you should
+   be linking your code against zookeeper_mt library
+
+Please take a look at cli.c to understand how to use the two API types. 
+(TODO: some kind of short tutorial would be helpful, I guess)
+
+
+SUPPORT
+
 For questions, please email <zookeeper-user@lists.sourceforge.net>
\ No newline at end of file
diff --git a/zookeeper/java/ChangeLog b/zookeeper/java/ChangeLog
index 08a9b0bde..7402e7673 100644
--- a/zookeeper/java/ChangeLog
+++ b/zookeeper/java/ChangeLog
@@ -1,6 +1,6 @@
-Release 1.0.0
-2007-11-27 Andrew Kornev <akornev@users.sourceforge.net>
-
-	* Updated the jute compiler to emit int32_t vs int in the generated C code
-	
+Release 1.0.0
+2007-11-27 Andrew Kornev <akornev@users.sourceforge.net>
+
+	* Updated the jute compiler to emit int32_t vs int in the generated C code
+	
 	* Changed release numbering scheme to match that of the C client
\ No newline at end of file
