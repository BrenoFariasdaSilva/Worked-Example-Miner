diff --git a/zookeeper/c/Makefile.am b/zookeeper/c/Makefile.am
index fa9ea61e2..087784287 100644
--- a/zookeeper/c/Makefile.am
+++ b/zookeeper/c/Makefile.am
@@ -11,7 +11,8 @@ lib_LTLIBRARIES = libzookeeper_st.la
 
 COMMON_SRC = src/zookeeper.c include/zookeeper.h \
 	src/recordio.c include/recordio.h include/proto.h \
-	src/zk_adaptor.h generated/zookeeper.jute.c
+	src/zk_adaptor.h generated/zookeeper.jute.c \
+	src/zk_log.h src/zk_log.c
 	
 libzookeeper_st_la_SOURCES = $(COMMON_SRC) src/st_adaptor.c
 libzookeeper_st_la_LDFLAGS = $(LIB_LDFLAGS)
diff --git a/zookeeper/c/include/zookeeper.h b/zookeeper/c/include/zookeeper.h
index a16da3fb0..4de8e3f1d 100644
--- a/zookeeper/c/include/zookeeper.h
+++ b/zookeeper/c/include/zookeeper.h
@@ -54,14 +54,14 @@
 /* Support for building on various platforms */
 
 // on cygwin we should take care of exporting/importing symbols properly 
-#if defined(__CYGWIN__) && !defined(ZOO_STATIC_LIB)
-# ifdef BUILD_LIB
-#  define ZOOAPI __declspec(dllexport)
-# else
-#  define ZOOAPI __declspec(dllimport)
-# endif
+#ifdef DLL_EXPORT
+#    define ZOOAPI __declspec(dllexport)
 #else
-#  define ZOOAPI
+#  if defined(__CYGWIN__) && !defined(USE_STATIC_LIB)
+#    define ZOOAPI __declspec(dllimport)
+#  else
+#    define ZOOAPI
+#  endif
 #endif
 
 /** zookeeper return constants **/
diff --git a/zookeeper/c/src/cli.c b/zookeeper/c/src/cli.c
index bd0b1adc9..fc60e8810 100644
--- a/zookeeper/c/src/cli.c
+++ b/zookeeper/c/src/cli.c
@@ -384,8 +384,9 @@ int main(int argc, char **argv)
 #else
 	strcpy(p,"dummy");
 #endif
+	//zoo_set_debug_level(LOG_LEVEL_DEBUG);
 	zoo_deterministic_conn_order(1);  // enable deterministic order
-        hostPort = argv[1];
+    hostPort = argv[1];
 	zh = zookeeper_init(hostPort, watcher, 10000, &myid);
 	if (!zh) {
 		return errno;
@@ -407,6 +408,7 @@ int main(int argc, char **argv)
         rc = read(0, buffer+bufoff, len);
         if (rc <= 0) {
             fprintf(stderr, "bye\n");
+            shutdownThisThing=1;
             break;
         }
         bufoff += rc;
diff --git a/zookeeper/c/src/mt_adaptor.c b/zookeeper/c/src/mt_adaptor.c
index 577678adc..aec4fdcfa 100755
--- a/zookeeper/c/src/mt_adaptor.c
+++ b/zookeeper/c/src/mt_adaptor.c
@@ -17,7 +17,9 @@
 #define THREADED
 #endif
 
-#define BUILD_LIB
+#ifndef DLL_EXPORT
+#  define USE_STATIC_LIB
+#endif
 
 #ifndef _GNU_SOURCE
 #define _GNU_SOURCE
@@ -213,7 +215,7 @@ void *do_completion(void *v)
     zhandle_t *zh = v;
     while(zh->state >= 0) {
         pthread_mutex_lock(&zh->completions_to_process.lock);
-                while(!zh->completions_to_process.head && zh->state >= 0) {
+        while(!zh->completions_to_process.head && zh->state >= 0) {
             pthread_cond_wait(&zh->completions_to_process.cond, &zh->completions_to_process.lock);
         }
         pthread_mutex_unlock(&zh->completions_to_process.lock);
diff --git a/zookeeper/c/src/st_adaptor.c b/zookeeper/c/src/st_adaptor.c
index 7c2412b20..18f2c5c79 100755
--- a/zookeeper/c/src/st_adaptor.c
+++ b/zookeeper/c/src/st_adaptor.c
@@ -14,7 +14,10 @@
  * limitations under the License.
  */
 
-#define BUILD_LIB
+#ifndef DLL_EXPORT
+#  define USE_STATIC_LIB
+#endif
+
 #include "zk_adaptor.h"
 #include <stdlib.h>
 
diff --git a/zookeeper/c/src/zk_log.c b/zookeeper/c/src/zk_log.c
new file mode 100644
index 000000000..6decb1bbf
--- /dev/null
+++ b/zookeeper/c/src/zk_log.c
@@ -0,0 +1,49 @@
+#ifndef DLL_EXPORT
+#  define USE_STATIC_LIB
+#endif
+
+#include "zk_log.h"
+#include <stdio.h>
+#include <unistd.h>
+#include <stdarg.h>
+
+ZooLogLevel logLevel=LOG_LEVEL_INFO;
+
+static const char* time_now(){
+    static char now_str[128];
+    struct timeval tv;
+    
+    gettimeofday(&tv,0);
+    //sprintf(now_str,"%ld.%03d",tv.tv_sec,(int)(tv.tv_usec/1000));
+    sprintf(now_str,"%ld.%03d.%03d",tv.tv_sec,(int)(tv.tv_usec/1000),(int)(tv.tv_usec%1000));
+    return now_str;
+}
+
+void log_message(ZooLogLevel curLevel,int line,const char* funcName,
+    const char* message)
+{
+    static const char* dbgLevelStr[]={"ZOO_INVALID","ZOO_ERROR","ZOO_WARN",
+            "ZOO_INFO","ZOO_DEBUG"};
+    static pid_t pid=0;
+    if(pid==0)pid=getpid();
+    fprintf(LOGSTREAM, "%s:%d:%s@%s@%d: %s\n", time_now(),pid,
+            dbgLevelStr[curLevel],funcName,line,message);
+    fflush(LOGSTREAM);
+}
+
+const char* format_log_message(const char* format,...)
+{
+    static char buf[2048];
+    va_list va;
+    va_start(va,format);
+    vsnprintf(buf, sizeof(buf)-1,format,va);
+    va_end(va); 
+    return buf;
+}
+
+void setCurrentLogLevel(ZooLogLevel level)
+{
+    if(level<LOG_LEVEL_ERROR)level=LOG_LEVEL_ERROR;
+    if(level>LOG_LEVEL_DEBUG)level=LOG_LEVEL_DEBUG;
+    logLevel=level;
+}
diff --git a/zookeeper/c/src/zk_log.h b/zookeeper/c/src/zk_log.h
new file mode 100644
index 000000000..18880cb75
--- /dev/null
+++ b/zookeeper/c/src/zk_log.h
@@ -0,0 +1,25 @@
+#ifndef ZK_LOG_H_
+#define ZK_LOG_H_
+
+#include <zookeeper.h>
+
+extern ZOOAPI ZooLogLevel logLevel;
+#define LOGSTREAM stderr
+
+#define LOG_ERROR(x) \
+    log_message(LOG_LEVEL_DEBUG,__LINE__,__func__,format_log_message x)
+#define LOG_WARN(x) if(logLevel>=LOG_LEVEL_WARN) \
+    log_message(LOG_LEVEL_WARN,__LINE__,__func__,format_log_message x)
+#define LOG_INFO(x) if(logLevel>=LOG_LEVEL_INFO) \
+    log_message(LOG_LEVEL_INFO,__LINE__,__func__,format_log_message x)
+#define LOG_DEBUG(x) if(logLevel==LOG_LEVEL_DEBUG) \
+    log_message(LOG_LEVEL_DEBUG,__LINE__,__func__,format_log_message x)
+
+void setCurrentLogLevel(ZooLogLevel level);
+
+void log_message(ZooLogLevel curLevel, int line,const char* funcName,
+    const char* message);
+
+const char* format_log_message(const char* format,...);
+
+#endif /*ZK_LOG_H_*/
diff --git a/zookeeper/c/src/zookeeper.c b/zookeeper/c/src/zookeeper.c
index 788d4bc3b..a4e5992cf 100644
--- a/zookeeper/c/src/zookeeper.c
+++ b/zookeeper/c/src/zookeeper.c
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
  
-#define BUILD_LIB
+#ifndef DLL_EXPORT
+#  define USE_STATIC_LIB
+#endif
 
 #if defined(__CYGWIN__)
 #define USE_IPV6
@@ -24,6 +26,7 @@
 #include <zookeeper.jute.h>
 #include <proto.h>
 #include "zk_adaptor.h"
+#include "zk_log.h"
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
@@ -41,8 +44,6 @@
 #include <assert.h>
 #include <stdarg.h>
 
-#define LOGSTREAM stderr
-
 const int ZOOKEEPER_WRITE = 1 << 0;
 const int ZOOKEEPER_READ = 1 << 1;
 
@@ -151,26 +152,11 @@ static void dispatch_events_till_ready(zhandle_t *zh,
 int flush_send_queue(zhandle_t*zh, int timeout);
 static int handle_socket_error_msg(zhandle_t *zh, int line, int rc,
 	const char* format,...);
-static void log_message(ZooLogLevel curLevel, int line,const char* funcName,
-	const char* message);
-static const char* format_log_message(const char* format,...);
 static void cleanup_bufs(zhandle_t *zh,int callCompletion,int rc);
 
 static int disable_conn_permute=0; // permute enabled by default
 
-static ZooLogLevel logLevel=LOG_LEVEL_INFO;
-
-#define LOG_ERROR(x) \
-    log_message(LOG_LEVEL_DEBUG,__LINE__,__func__,format_log_message x)
-#define LOG_WARN(x) if(logLevel>=LOG_LEVEL_WARN) \
-    log_message(LOG_LEVEL_WARN,__LINE__,__func__,format_log_message x)
-#define LOG_INFO(x) if(logLevel>=LOG_LEVEL_INFO) \
-    log_message(LOG_LEVEL_INFO,__LINE__,__func__,format_log_message x)
-#define LOG_DEBUG(x) if(logLevel==LOG_LEVEL_DEBUG) \
-    log_message(LOG_LEVEL_DEBUG,__LINE__,__func__,format_log_message x)
-
 static void *SYNCHRONOUS_MARKER = (void*)&SYNCHRONOUS_MARKER;
-
     
 typedef struct _completion_list {
     int xid;
@@ -756,38 +742,6 @@ static int handle_socket_error_msg(zhandle_t *zh, int line, int rc,
 	return rc;
 }
 
-const char* time_now(){
-    static char now_str[128];
-    struct timeval tv;
-    
-    gettimeofday(&tv,0);
-    //sprintf(now_str,"%ld.%03d",tv.tv_sec,(int)(tv.tv_usec/1000));
-    sprintf(now_str,"%ld.%03d.%03d",tv.tv_sec,(int)(tv.tv_usec/1000),(int)(tv.tv_usec%1000));
-    return now_str;
-}
-
-static void log_message(ZooLogLevel curLevel,int line,const char* funcName,
-	const char* message)
-{
-    static const char* dbgLevelStr[]={"ZOO_INVALID","ZOO_ERROR","ZOO_WARN",
-            "ZOO_INFO","ZOO_DEBUG"};
-    static pid_t pid=0;
-    if(pid==0)pid=getpid();
-    fprintf(LOGSTREAM, "%s:%d:%s@%s@%d: %s\n", time_now(),pid,
-            dbgLevelStr[curLevel],funcName,line,message);
-    fflush(LOGSTREAM);
-}
-
-static const char* format_log_message(const char* format,...)
-{
-    static char buf[2048];
-    va_list va;
-    va_start(va,format);
-    vsnprintf(buf, sizeof(buf)-1,format,va);
-    va_end(va); 
-    return buf;
-}
-
 static void auth_completion_func(int rc, zhandle_t* zh)
 {
 	if(zh==NULL)
@@ -1328,10 +1282,14 @@ int zookeeper_process(zhandle_t *zh, int events)
                 return api_epilog(zh,ZRUNTIMEINCONSISTENCY);
             }
             if (cptr->c.void_result != SYNCHRONOUS_MARKER) {
-                cptr->buffer = bptr;
-                queue_completion(&zh->completions_to_process, cptr, 0);
-            } else if (hdr.xid == PING_XID) {
-                // Nothing to do with a ping response
+                if(hdr.xid == PING_XID){
+                    // Nothing to do with a ping response
+                    free_buffer(bptr);
+                    free(cptr);
+                } else { 
+                    cptr->buffer = bptr;
+                    queue_completion(&zh->completions_to_process, cptr, 0);
+                }
             } else {
                 struct sync_completion
                         *sc = (struct sync_completion*)cptr->data;
@@ -2059,15 +2017,14 @@ static const char* format_endpoint_info(const struct sockaddr* ep)
     return buf;
 }
 
-static const char* format_current_endpoint_info(zhandle_t* zh){
+static const char* format_current_endpoint_info(zhandle_t* zh)
+{
     return format_endpoint_info(&zh->addrs[zh->connect_index]);
 }
 
 void zoo_set_debug_level(ZooLogLevel level)
 {
-    if(level<LOG_LEVEL_ERROR)level=LOG_LEVEL_ERROR;
-    if(level>LOG_LEVEL_DEBUG)level=LOG_LEVEL_DEBUG;
-    logLevel=level;
+    setCurrentLogLevel(level);
 }
 
 void zoo_deterministic_conn_order(int yesOrNo)
