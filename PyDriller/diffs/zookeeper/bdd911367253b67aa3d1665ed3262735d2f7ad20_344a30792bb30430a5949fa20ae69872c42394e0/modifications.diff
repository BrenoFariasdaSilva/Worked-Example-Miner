diff --git a/zookeeper/java/src/com/yahoo/zookeeper/ClientCnxn.java b/zookeeper/java/src/com/yahoo/zookeeper/ClientCnxn.java
index c7ce90e51..1a9f9f397 100755
--- a/zookeeper/java/src/com/yahoo/zookeeper/ClientCnxn.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/ClientCnxn.java
@@ -406,7 +406,10 @@ void readResponse() throws IOException {
                 throw new IOException("Nothing in the queue, but got "
                         + r.getXid());
             }
-            Packet p = pendingQueue.remove();
+            Packet p = null;
+            synchronized(pendingQueue) {
+                p = pendingQueue.remove();
+            }
             /*
              * Since requests are processed in order, we better get a response
              * to the first request!
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/FinalRequestProcessor.java b/zookeeper/java/src/com/yahoo/zookeeper/server/FinalRequestProcessor.java
index 21f676480..97124cc05 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/FinalRequestProcessor.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/FinalRequestProcessor.java
@@ -42,6 +42,7 @@
 import com.yahoo.zookeeper.proto.SetACLResponse;
 import com.yahoo.zookeeper.proto.SetDataResponse;
 import com.yahoo.zookeeper.server.DataTree.ProcessTxnResult;
+import com.yahoo.zookeeper.server.NIOServerCnxn.Factory;
 import com.yahoo.zookeeper.txn.CreateSessionTxn;
 import com.yahoo.zookeeper.txn.ErrorTxn;
 
@@ -102,11 +103,21 @@ public void processRequest(Request request) {
                     zks.sessionTracker.removeSession(request.sessionId);
                 }
             }
+            // do not add non quorum packets to the queue.
+            if (Request.isQuorum(request.type)) {
+                zks.addCommittedProposal(request);
+            }
         }
 
         if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {
-            zks.getServerCnxnFactory().closeSession(request.sessionId);
+            Factory scxn = zks.getServerCnxnFactory();
+            // this might be possible since
+            // we might just be playing diffs from the leader
+            if (scxn != null) {
+                scxn.closeSession(request.sessionId);
+            }
         }
+        
         if (request.cnxn == null) {
             return;
         }
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/Request.java b/zookeeper/java/src/com/yahoo/zookeeper/server/Request.java
index 43db2fb23..7bbd33277 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/Request.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/Request.java
@@ -100,6 +100,26 @@ static boolean isValid(int type) {
         }
     }
 
+    static boolean isQuorum(int type) {
+        switch (type) {
+        case OpCode.exists:
+        case OpCode.getACL:
+        case OpCode.getChildren:
+        case OpCode.getData:
+            return false;
+        case OpCode.error:
+        case OpCode.closeSession:
+        case OpCode.create:
+        case OpCode.createSession:
+        case OpCode.delete:
+        case OpCode.setACL:
+        case OpCode.setData:
+            return true;
+        default:
+            return false;
+        }
+    }
+    
     static String op2String(int op) {
         switch (op) {
         case OpCode.notification:
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/SessionTrackerImpl.java b/zookeeper/java/src/com/yahoo/zookeeper/server/SessionTrackerImpl.java
index d9d0a4764..5ed45d226 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/SessionTrackerImpl.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/SessionTrackerImpl.java
@@ -58,6 +58,7 @@ public static long initializeNextSession(long id) {
     	long nextSid = 0;
     	nextSid = (System.currentTimeMillis() << 24) >> 8;
     	nextSid =  nextSid | (id <<56);
+    	ZooLog.logWarn("printing the initiailzied next session with id " +  id + " next id " + Long.toHexString(nextSid));
     	return nextSid;
     }
     
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/ZooKeeperServer.java b/zookeeper/java/src/com/yahoo/zookeeper/server/ZooKeeperServer.java
index 2a5c635e3..2a50b61ce 100755
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/ZooKeeperServer.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/ZooKeeperServer.java
@@ -1,4 +1,4 @@
-/*
+ /*
  * Copyright 2008, Yahoo! Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -17,6 +17,7 @@
 package com.yahoo.zookeeper.server;
 
 import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
 import java.io.EOFException;
 import java.io.File;
 import java.io.FileInputStream;
@@ -26,6 +27,7 @@
 import java.io.RandomAccessFile;
 import java.io.SyncFailedException;
 import java.nio.ByteBuffer;
+import java.nio.channels.FileChannel;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -55,6 +57,9 @@
 import com.yahoo.zookeeper.server.auth.DigestAuthenticationProvider;
 import com.yahoo.zookeeper.server.auth.HostAuthenticationProvider;
 import com.yahoo.zookeeper.server.auth.IPAuthenticationProvider;
+import com.yahoo.zookeeper.server.quorum.Leader;
+import com.yahoo.zookeeper.server.quorum.QuorumPacket;
+import com.yahoo.zookeeper.server.quorum.Leader.Proposal;
 import com.yahoo.zookeeper.txn.CreateSessionTxn;
 import com.yahoo.zookeeper.txn.CreateTxn;
 import com.yahoo.zookeeper.txn.DeleteTxn;
@@ -71,6 +76,11 @@
 public class ZooKeeperServer implements SessionExpirer {
     protected int tickTime = 3000;
 
+    public static final int commitLogCount = 500;
+    public int commitLogBuffer = 700;
+    public LinkedList<Proposal> committedLog = new LinkedList<Proposal>();
+    public long minCommittedLog, maxCommittedLog;
+
     HashMap<String, AuthenticationProvider> authenticationProviders = new HashMap<String, AuthenticationProvider>();
 
     /*
@@ -354,12 +364,59 @@ public long playLog(InputArchive logStream) throws IOException {
                 default:
                     dataTree.processTxn(hdr, txn);
                 }
+                Request r = new Request(null, 0, 
+                        hdr.getCxid(),  hdr.getType(), 
+                        null,null);
+                r.txn = txn;
+                r.hdr = hdr;
+                r.zxid = hdr.getZxid();
+                addCommittedProposal(r);
             }
         } catch (EOFException e) {
         }
         return highestZxid;
     }
+    
+    /** 
+     * maintains a list of last 500 or so committed requests. 
+     * This is used for fast follower synchronization. 
+     * @param r committed request
+     */
 
+    public void addCommittedProposal(Request request){
+        synchronized(committedLog) {
+            if (committedLog.size() > commitLogCount) {
+                committedLog.removeFirst();
+                minCommittedLog = 
+                    committedLog.getFirst().packet.getZxid();
+            }
+            if (committedLog.size() == 0) {
+                minCommittedLog = request.zxid;
+                maxCommittedLog = request.zxid;
+            }
+            
+            ByteArrayOutputStream baos = new ByteArrayOutputStream();
+            BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);
+            try {
+                request.hdr.serialize(boa, "hdr");
+                if (request.txn != null) {
+                    request.txn.serialize(boa, "txn");
+                }
+                baos.close();
+            } catch (IOException e) {
+                // This really should be impossible
+                ZooLog.logException(e);
+            }
+            QuorumPacket pp = new QuorumPacket(Leader.PROPOSAL, request.zxid, baos
+                    .toByteArray(), null);
+            Proposal p = new Proposal();
+            p.packet = pp;
+            p.request = request;
+            committedLog.add(p);
+            maxCommittedLog = p.packet.getZxid();
+        }
+    }
+    
     static public Record deserializeTxn(InputArchive ia, TxnHeader hdr)
             throws IOException {
         hdr.deserialize(ia, "hdr");
@@ -394,6 +451,64 @@ static public Record deserializeTxn(InputArchive ia, TxnHeader hdr)
         return txn;
     }
 
+    public void truncateLog(long finalZxid) throws IOException {
+    	long highestZxid = 0;
+        for (File f : dataDir.listFiles()) {
+            long zxid = isValidSnapshot(f);
+            if (zxid == -1) {
+                ZooLog.logWarn("Skipping " + f);
+                continue;
+            }
+            if (zxid > highestZxid) {
+                highestZxid = zxid;
+            }
+        }
+        File[] files = getLogFiles(dataLogDir, highestZxid);
+        boolean truncated = false;
+        for (File f: files) {
+            FileInputStream fin = new FileInputStream(f);
+            InputArchive ia = BinaryInputArchive.getArchive(fin);
+            FileChannel fchan = fin.getChannel();
+            try {
+                while (true) {
+                    byte[] bytes = ia.readBuffer("txtEntry");
+                    if (bytes.length == 0) {
+                        throw new EOFException();
+                    }
+                    InputArchive iab = BinaryInputArchive.getArchive(
+                            new ByteArrayInputStream(bytes));
+                    TxnHeader hdr = new TxnHeader();
+                    Record txn = deserializeTxn(iab, hdr);
+                    if (ia.readByte("EOF") != 'B') {
+                        throw new EOFException();
+                    }
+                    if (hdr.getZxid() == finalZxid) {
+                        //this is where we need to truncate
+                        
+                        long pos = fchan.position();
+                        fin.close();
+                        FileOutputStream fout = new FileOutputStream(f);
+                        FileChannel fchanOut = fout.getChannel();
+                        fchanOut.truncate(pos);                     
+                        truncated = true;
+                        break;
+                    }
+                }
+            } catch(EOFException eof){
+            }   
+            if (truncated == true) {
+                break;
+            }
+        }
+        if (truncated == false) {
+            //not able to truncate the log
+            ZooLog.logError("Not able to truncate the log " + 
+                    Long.toHexString(finalZxid));
+            System.exit(13);
+        }
+     
+    }
+
     public void snapshot(BinaryOutputArchive oa) throws IOException,
             InterruptedException {
         HashMap<Long, Integer> sessSnap = new HashMap<Long, Integer>(
@@ -537,7 +652,9 @@ public void shutdown() {
         if (firstProcessor != null) {
             firstProcessor.shutdown();
         }
-        dataTree.clear();
+        if (dataTree != null) {
+            dataTree.clear();
+        }
     }
 
     /**
@@ -717,6 +834,7 @@ public int getGlobalOutstandingLimit() {
         return limit;
     }
 
+    
     public void setServerCnxnFactory(Factory factory) {
         this.serverCnxnFactory = factory;
     }
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/ZooLog.java b/zookeeper/java/src/com/yahoo/zookeeper/server/ZooLog.java
index 7e75511bc..b2b7e84ad 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/ZooLog.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/ZooLog.java
@@ -271,11 +271,15 @@ private static void checkTraceFile() {
 
     static public void logQuorumPacket(char direction, QuorumPacket qp,
             long traceMask) {
-        if (!doLog(traceMask)) {
+        return;
+        /*
+         * 
+         if (!doLog(traceMask)) {
             return;
         }
         logTextTraceMessage(direction + " "
                 + FollowerHandler.packetToString(qp), traceMask);
+        */
     }
 
     public static void logTextTraceMessage(String text, long traceMask) {
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/Follower.java b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/Follower.java
index 2e2f5f7ac..6cfff8f3e 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/Follower.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/Follower.java
@@ -146,14 +146,22 @@ void followLeader() throws InterruptedException {
             qp.setZxid(sentLastZxid);
             writePacket(qp);
             readPacket(qp);
+            long newLeaderZxid = qp.getZxid();
+            
             if (qp.getType() != Leader.NEWLEADER) {
                 ZooLog.logError("First packet should have been NEWLEADER");
                 throw new IOException("First packet should have been NEWLEADER");
             }
             zk = new FollowerZooKeeperServer(self.getId(), self.dataDir,
                     self.dataLogDir, this);
+            readPacket(qp);
             synchronized (zk) {
-                if (qp.getZxid() != sentLastZxid) {
+                if (qp.getType() == Leader.DIFF) {
+                    ZooLog.logWarn("Getting a diff from the leader!");
+                    zk.loadData();
+                }
+                else if (qp.getType() == Leader.SNAP) {
+                    ZooLog.logWarn("Getting a snapshot from leader");
                     // The leader is going to dump the database
                     zk.loadData(leaderIs);
                     String signature = leaderIs.readString("signature");
@@ -161,12 +169,21 @@ void followLeader() throws InterruptedException {
                         ZooLog.logError("Missing signature. Got " + signature);
                         throw new IOException("Missing signature");
                     }
-                } else {
+                } else if (qp.getType() == Leader.TRUNC) {
+                    //we need to truncate the log to the lastzxid of the leader
+                    ZooLog.logWarn("Truncating log to get in sync with the leader " 
+                            + Long.toHexString(qp.getZxid()));
+                    zk.truncateLog(qp.getZxid());
                     zk.loadData();
                 }
-                zk.dataTree.lastProcessedZxid = qp.getZxid();
+                else {
+                    ZooLog.logError("Got unexpected packet from leader " 
+                            + qp.getType() + " exiting ... " );
+                    System.exit(13);
+                }
+                zk.dataTree.lastProcessedZxid = newLeaderZxid;
             }
-            ack.setZxid(qp.getZxid() & ~0xffffffffL);
+            ack.setZxid(newLeaderZxid & ~0xffffffffL);
             writePacket(ack);
             sock.setSoTimeout(self.tickTime * self.syncLimit);
             zk.startup();
@@ -274,7 +291,7 @@ void validateSession(ServerCnxn cnxn, long clientId, int timeout)
         QuorumPacket qp = new QuorumPacket(Leader.REVALIDATE, -1, baos
                 .toByteArray(), null);
         pendingRevalidations.put(clientId, cnxn);
-        ZooLog.logTextTraceMessage("To validate session " + clientId,
+        ZooLog.logTextTraceMessage("To validate session " + Long.toHexString(clientId),
                 ZooLog.SESSION_TRACE_MASK);
         writePacket(qp);
     }
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerHandler.java b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerHandler.java
index cb3db9801..b12f84189 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerHandler.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerHandler.java
@@ -33,6 +33,7 @@
 import com.yahoo.zookeeper.ZooDefs.OpCode;
 import com.yahoo.zookeeper.server.ZooKeeperServer;
 import com.yahoo.zookeeper.server.ZooLog;
+import com.yahoo.zookeeper.server.quorum.Leader.Proposal;
 import com.yahoo.zookeeper.txn.TxnHeader;
 
 /**
@@ -186,12 +187,61 @@ public void run() {
                 return;
             }
             long peerLastZxid = qp.getZxid();
+            int packetToSend = Leader.SNAP;
+            boolean logTxns = true;
+          
+            long zxidToSend = 0;
+            // we are sending the diff
+            synchronized(leader.zk.committedLog) {
+                if (leader.zk.committedLog.size() != 0) {
+                    if ((leader.zk.maxCommittedLog >= peerLastZxid) 
+                            && (leader.zk.minCommittedLog <= peerLastZxid)) {
+                        packetToSend = Leader.DIFF;
+                        zxidToSend = leader.zk.maxCommittedLog;
+                        for (Proposal propose: leader.zk.committedLog) {
+                            if (propose.packet.getZxid() > peerLastZxid) {
+                                queuePacket(propose.packet);
+                                QuorumPacket qcommit = new QuorumPacket(Leader.COMMIT, propose.packet.getZxid(),
+                                        null, null);
+                                queuePacket(qcommit);
+                              
+                            }
+                        }
+                    }
+                }
+                else {
+                    logTxns = false;
+                }            }
             long leaderLastZxid = leader.startForwarding(this, peerLastZxid);
             QuorumPacket newLeaderQP = new QuorumPacket(Leader.NEWLEADER,
                     leaderLastZxid, null, null);
             oa.writeRecord(newLeaderQP, "packet");
-            if (leaderLastZxid != peerLastZxid) {
-                ZooLog.logWarn("sending Snapshot");
+            bufferedOutput.flush();
+            // a special case when both the ids are the same
+            if (peerLastZxid == leaderLastZxid) {
+                packetToSend = Leader.DIFF;
+                zxidToSend = leaderLastZxid;
+            }
+            //check if we decided to send a diff or we need to send a truncate
+            // we avoid using epochs for truncating because epochs make things 
+            // complicated. Two epochs might have the last 32 bits as same.
+            // only if we know that there is a committed zxid in the queue that
+            // is less than the one the peer has we send a trunc else to make
+            // things simple we just send sanpshot.
+            if (logTxns && (peerLastZxid > leader.zk.maxCommittedLog)) {
+                // this is the only case that we are sure that
+                // we can ask the follower to truncate the log
+                packetToSend = Leader.TRUNC;
+                zxidToSend = leader.zk.maxCommittedLog;
+                
+            }
+            oa.writeRecord(new QuorumPacket(packetToSend, zxidToSend, null, null), "packet");
+            bufferedOutput.flush();
+            // only if we are not truncating or fast sycning
+            if (packetToSend == Leader.SNAP) {
+                ZooLog.logWarn("Sending snapshot last zxid of peer is " 
+                        + Long.toHexString(peerLastZxid) + " " + " zxid of leader is " 
+                        + Long.toHexString(leaderLastZxid));
                 // Dump data to follower
                 leader.zk.snapshot(oa);
                 oa.writeString("BenWasHere", "signature");
@@ -326,7 +376,7 @@ public void ping() {
     void queuePacket(QuorumPacket p) {
         queuedPackets.add(p);
     }
-
+    
     public boolean synced() {
         return isAlive()
                 && tickOfLastAck >= leader.self.tick - leader.self.syncLimit;
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerZooKeeperServer.java b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerZooKeeperServer.java
index 830dd338c..d8a68491b 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerZooKeeperServer.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerZooKeeperServer.java
@@ -139,6 +139,14 @@ public int getGlobalOutstandingLimit() {
                 / (follower.self.quorumPeers.size() - 1);
     }
 
+    /**
+     * Do not do anything in the follower.
+     */
+    @Override
+    public void addCommittedProposal(Request r) {
+    	//do nothing
+    }
+    
     public void shutdown() {
         try {
             super.shutdown();
@@ -153,5 +161,4 @@ public void shutdown() {
             ZooLog.logException(e);
         }
     }
-
 }
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/Leader.java b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/Leader.java
index 9e88c2628..89b53938a 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/Leader.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/Leader.java
@@ -31,6 +31,7 @@
 import com.yahoo.zookeeper.server.FinalRequestProcessor;
 import com.yahoo.zookeeper.server.Request;
 import com.yahoo.zookeeper.server.RequestProcessor;
+import com.yahoo.zookeeper.server.ZooKeeperServer;
 import com.yahoo.zookeeper.server.ZooLog;
 import com.yahoo.zookeeper.server.quorum.QuorumPeer.ServerState;
 import com.yahoo.zookeeper.ZooDefs.OpCode;
@@ -106,6 +107,21 @@ void removeFollowerHandler(FollowerHandler follower) {
         }
     }
 
+    /**
+     * This message is for follower to expect diff
+     */
+    final static int DIFF = 13;
+    
+    /**
+     * This is for follower to truncate its logs 
+     */
+    final static int TRUNC = 14;
+    
+    /**
+     * This is for follower to download the snapshots
+     */
+    final static int SNAP = 15;
+    
     /**
      * This message type is sent by the leader to indicate it's zxid and if
      * needed, its database.
@@ -133,7 +149,7 @@ void removeFollowerHandler(FollowerHandler follower) {
     /**
      * This message type is sent by a leader to propose a mutation.
      */
-    final static int PROPOSAL = 2;
+    public final static int PROPOSAL = 2;
 
     /**
      * This message type is sent by a follower after it has synced a proposal.
