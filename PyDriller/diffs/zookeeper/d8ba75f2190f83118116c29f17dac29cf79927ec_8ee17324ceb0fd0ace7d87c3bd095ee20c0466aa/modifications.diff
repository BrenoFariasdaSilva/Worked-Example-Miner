diff --git a/zookeeper/c/include/proto.h b/zookeeper/c/include/proto.h
index ed0fb7292..1f90902a0 100755
--- a/zookeeper/c/include/proto.h
+++ b/zookeeper/c/include/proto.h
@@ -29,8 +29,7 @@ static const int SETDATA_OP=5;
 static const int GETACL_OP=6;
 static const int SETACL_OP=7;
 static const int GETCHILDREN_OP=8;
-static const int GETMAXCHILDREN_OP=9;
-static const int SETMAXCHILDREN_OP=10;
+static const int SYNC_OP=9;
 static const int PING_OP=11;
 static const int CLOSE_OP=-11;
 static const int SETAUTH_OP=100;
diff --git a/zookeeper/c/include/zookeeper.h b/zookeeper/c/include/zookeeper.h
index 049f273ac..a16da3fb0 100644
--- a/zookeeper/c/include/zookeeper.h
+++ b/zookeeper/c/include/zookeeper.h
@@ -647,6 +647,28 @@ ZOOAPI int zoo_aset(zhandle_t *zh, const char *path, const char *buffer, int buf
 ZOOAPI int zoo_aget_children(zhandle_t *zh, const char *path, int watch, 
         strings_completion_t completion, const void *data);
 
+/**
+ * \brief Flush leader channel.
+ *
+ * \param zh the zookeeper handle obtained by a call to \ref zookeeper_init
+ * \param path the name of the node. Expressed as a file name with slashes
+ * separating ancestors of the node.
+ * \param completion the routine to invoke when the request completes. The completion
+ * will be triggered with one of the following codes passed in as the rc argument:
+ * ZOK operation completed succesfully
+ * ZNONODE the node does not exist.
+ * ZNOAUTH the client does not have permission.
+ * \param data the data that will be passed to the completion routine when
+ * the function completes.
+ * \return ZOK on success or one of the following errcodes on failure:
+ * ZBADARGUMENTS - invalid input parameters
+ * ZINVALIDSTATE - zhandle state is either SESSION_EXPIRED_STATE or AUTH_FAILED_STATE
+ * ZMARSHALLINGERROR - failed to marshall a request; possibly, out of memory
+ */
+
+ZOOAPI int zoo_async(zhandle_t *zh, const char *path, string_completion_t completion, const void *data);
+
+
 /**
  * \brief gets the acl associated with a node.
  * 
diff --git a/zookeeper/c/src/cli.c b/zookeeper/c/src/cli.c
index 1ec419f60..bd0b1adc9 100644
--- a/zookeeper/c/src/cli.c
+++ b/zookeeper/c/src/cli.c
@@ -307,6 +307,16 @@ void processline(char *line)
 		if (rc) {
 			fprintf(stderr, "Error %d for %s\n", rc, line);
 		}
+       } else if (startsWith(line, "sync ")){
+               line += 5;
+               if (line[0] != '/') {
+                       fprintf(stderr, "Path must start with /, found: %s\n", line);
+                       return;
+               }
+               rc = zoo_async(zh, line, my_string_completion, strdup(line));
+               if (rc) {
+                 fprintf(stderr, "Error %d for %s\n", rc, line);
+               }
 	} else if (startsWith(line, "exists ")) {
 		line += 7;
 		if (line[0] != '/') {
diff --git a/zookeeper/c/src/zookeeper.c b/zookeeper/c/src/zookeeper.c
index 55d8f8b21..788d4bc3b 100644
--- a/zookeeper/c/src/zookeeper.c
+++ b/zookeeper/c/src/zookeeper.c
@@ -1771,6 +1771,35 @@ int zoo_aget_children(zhandle_t *zh, const char *path, int watch,
     return (rc < 0)?ZMARSHALLINGERROR:ZOK;
 }
 
+int zoo_async(zhandle_t *zh, const char *path,
+        string_completion_t completion, const void *data)
+{
+    struct oarchive *oa;
+    struct RequestHeader h = { .xid = get_xid(), .type = SYNC_OP};
+    struct SyncRequest req;
+    int rc;
+
+    if (zh==0)
+        return ZBADARGUMENTS;
+    if (is_unrecoverable(zh))
+        return ZINVALIDSTATE;
+    oa = create_buffer_oarchive();
+    req.path = (char*)path;
+    rc = serialize_RequestHeader(oa, "header", &h);
+    rc = rc < 0 ? rc : serialize_SyncRequest(oa, "req", &req);
+    rc = rc < 0 ? rc : add_string_completion(zh, h.xid, completion, data);
+    rc = rc < 0 ? rc : queue_buffer_bytes(&zh->to_send, get_buffer(oa),
+            get_buffer_len(oa));
+    /* We queued the buffer, so don't free it */
+    close_buffer_oarchive(&oa, 0);
+
+    LOG_DEBUG(("Sending zoo_sync() request to %s",format_current_endpoint_info(zh)));
+    /* make a best (non-blocking) effort to send the requests asap */
+    adaptor_send_queue(zh, 0);
+    return (rc < 0)?ZMARSHALLINGERROR:ZOK;
+}
+
+
 int zoo_aget_acl(zhandle_t *zh, const char *path, acl_completion_t completion,
         const void *data)
 {
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/ZooDefs.java b/zookeeper/java/src/com/yahoo/zookeeper/ZooDefs.java
index 545d12f6c..00b0603d8 100755
--- a/zookeeper/java/src/com/yahoo/zookeeper/ZooDefs.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/ZooDefs.java
@@ -41,6 +41,8 @@ public interface OpCode {
         public final int setACL = 7;
 
         public final int getChildren = 8;
+        
+        public final int sync = 9;
 
         public final int ping = 11;
 
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/ZooKeeper.java b/zookeeper/java/src/com/yahoo/zookeeper/ZooKeeper.java
index ec2713630..f6286d1aa 100755
--- a/zookeeper/java/src/com/yahoo/zookeeper/ZooKeeper.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/ZooKeeper.java
@@ -1,4 +1,4 @@
-/*
+/**
  * Copyright 2008, Yahoo! Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -49,6 +49,8 @@
 import com.yahoo.zookeeper.proto.SetACLResponse;
 import com.yahoo.zookeeper.proto.SetDataRequest;
 import com.yahoo.zookeeper.proto.SetDataResponse;
+import com.yahoo.zookeeper.proto.SyncRequest;
+import com.yahoo.zookeeper.proto.SyncResponse;
 import com.yahoo.zookeeper.proto.WatcherEvent;
 import com.yahoo.zookeeper.server.DataTree;
 
@@ -653,6 +655,21 @@ public void getChildren(String path, boolean watch, ChildrenCallback cb,
                         ctx);
     }
 
+    /**
+     * Asynchronous sync. Flushes channel between process and leader.
+     * 
+     * @see #sync(String)
+     */
+    public void sync(String path, VoidCallback cb, Object ctx){
+    	RequestHeader h = new RequestHeader();
+    	h.setType(ZooDefs.OpCode.sync);
+    	SyncRequest request = new SyncRequest();
+    	SyncResponse response = new SyncResponse();
+    	request.setPath(path);
+    	cnxn.queuePacket(h, new ReplyHeader(), request, response, cb, path, ctx);
+    	System.out.println("Sending sync!");
+    }
+    
     public States getState() {
         return state;
     }
@@ -669,6 +686,7 @@ static void usage() {
         System.err.println("\tgetAcl path");
         System.err.println("\tsetAcl path acl");
         System.err.println("\tstat path [watch]");
+        System.err.println("\tsync path");
     }
 
     static private class MyWatcher implements Watcher {
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/FinalRequestProcessor.java b/zookeeper/java/src/com/yahoo/zookeeper/server/FinalRequestProcessor.java
index e8b330079..21f676480 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/FinalRequestProcessor.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/FinalRequestProcessor.java
@@ -36,6 +36,8 @@
 import com.yahoo.zookeeper.proto.GetChildrenResponse;
 import com.yahoo.zookeeper.proto.GetDataRequest;
 import com.yahoo.zookeeper.proto.GetDataResponse;
+import com.yahoo.zookeeper.proto.SyncRequest;
+import com.yahoo.zookeeper.proto.SyncResponse;
 import com.yahoo.zookeeper.proto.ReplyHeader;
 import com.yahoo.zookeeper.proto.SetACLResponse;
 import com.yahoo.zookeeper.proto.SetDataResponse;
@@ -141,6 +143,12 @@ public void processRequest(Request request) {
             case OpCode.closeSession:
                 err = rc.err;
                 break;
+            case OpCode.sync:
+            	SyncRequest syncRequest = new SyncRequest();
+            	ZooKeeperServer.byteBuffer2Record(request.request,
+            			syncRequest);
+            	rsp = new SyncResponse(syncRequest.getPath());
+            	break;
             case OpCode.exists:
                 // TODO we need to figure out the security requirement for this!
                 ExistsRequest existsRequest = new ExistsRequest();
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/PrepRequestProcessor.java b/zookeeper/java/src/com/yahoo/zookeeper/server/PrepRequestProcessor.java
index f17d4a303..e32943a55 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/PrepRequestProcessor.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/PrepRequestProcessor.java
@@ -36,6 +36,7 @@
 import com.yahoo.zookeeper.proto.DeleteRequest;
 import com.yahoo.zookeeper.proto.SetACLRequest;
 import com.yahoo.zookeeper.proto.SetDataRequest;
+import com.yahoo.zookeeper.proto.SyncRequest;
 import com.yahoo.zookeeper.server.ZooKeeperServer.ChangeRecord;
 import com.yahoo.zookeeper.server.auth.AuthenticationProvider;
 import com.yahoo.zookeeper.txn.CreateSessionTxn;
@@ -335,6 +336,7 @@ protected void pRequest(Request request) {
                 ZooLog.logWarn("Processed session termination request for id: "
                         + Long.toHexString(request.sessionId));
                 break;
+            case OpCode.sync:
             case OpCode.exists:
             case OpCode.getData:
             case OpCode.getACL:
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/Request.java b/zookeeper/java/src/com/yahoo/zookeeper/server/Request.java
index f8792d6b2..43db2fb23 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/Request.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/Request.java
@@ -88,6 +88,7 @@ static boolean isValid(int type) {
         case OpCode.exists:
         case OpCode.getData:
         case OpCode.setData:
+        case OpCode.sync:
         case OpCode.getACL:
         case OpCode.setACL:
         case OpCode.getChildren:
@@ -113,6 +114,8 @@ static String op2String(int op) {
             return "getDate";
         case OpCode.setData:
             return "setData";
+        case OpCode.sync:
+          	return "sync:";
         case OpCode.getACL:
             return "getACL";
         case OpCode.setACL:
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/CommitProcessor.java b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/CommitProcessor.java
index e6450417d..3014773dc 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/CommitProcessor.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/CommitProcessor.java
@@ -41,6 +41,11 @@ public class CommitProcessor extends Thread implements RequestProcessor {
      */
     LinkedList<Request> committedRequests = new LinkedList<Request>();
 
+    /*
+     * Pending sync requests
+     */
+    LinkedList<Request> pendingSyncs = new LinkedList<Request>();
+    
     RequestProcessor nextProcessor;
 
     public CommitProcessor(RequestProcessor nextProcessor) {
@@ -114,6 +119,10 @@ public void run() {
                         case OpCode.closeSession:
                             nextPending = request;
                             break;
+                        case OpCode.sync:
+                        	nextPending = request;
+                        	pendingSyncs.add(request);
+                        	break;
                         default:
                             toProcess.add(request);
                         }
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/Follower.java b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/Follower.java
index 2d111131f..2e2f5f7ac 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/Follower.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/Follower.java
@@ -37,6 +37,7 @@
 import com.yahoo.jute.InputArchive;
 import com.yahoo.jute.OutputArchive;
 import com.yahoo.jute.Record;
+import com.yahoo.zookeeper.ZooDefs.OpCode;
 import com.yahoo.zookeeper.server.Request;
 import com.yahoo.zookeeper.server.ServerCnxn;
 import com.yahoo.zookeeper.server.ZooKeeperServer;
@@ -225,6 +226,10 @@ void followLeader() throws InterruptedException {
                     }
                     ZooLog.logTextTraceMessage("Session " + sessionId
                             + " is valid: " + valid, ZooLog.SESSION_TRACE_MASK);
+                    break;
+                case Leader.SYNC:
+                	zk.sync();
+                	break;
                 }
             }
         } catch (IOException e) {
@@ -298,6 +303,15 @@ void request(Request request) throws IOException {
         oa.close();
         QuorumPacket qp = new QuorumPacket(Leader.REQUEST, -1, baos
                 .toByteArray(), request.authInfo);
+//        QuorumPacket qp;
+//        if(request.type == OpCode.sync){
+//        	qp = new QuorumPacket(Leader.SYNC, -1, baos
+//        			.toByteArray(), request.authInfo);
+//        }	
+//        else{
+//        qp = new QuorumPacket(Leader.REQUEST, -1, baos
+//        		.toByteArray(), request.authInfo);
+//        }
         writePacket(qp);
     }
 
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerHandler.java b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerHandler.java
index 5bc083cef..cb3db9801 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerHandler.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerHandler.java
@@ -30,6 +30,7 @@
 import com.yahoo.jute.BinaryInputArchive;
 import com.yahoo.jute.BinaryOutputArchive;
 import com.yahoo.jute.Record;
+import com.yahoo.zookeeper.ZooDefs.OpCode;
 import com.yahoo.zookeeper.server.ZooKeeperServer;
 import com.yahoo.zookeeper.server.ZooLog;
 import com.yahoo.zookeeper.txn.TxnHeader;
@@ -227,6 +228,13 @@ public void run() {
                 }
                 ZooLog.logQuorumPacket('i', qp, traceMask);
                 tickOfLastAck = leader.self.tick;
+                
+                                
+                ByteBuffer bb;
+                long sessionId;
+                int cxid;
+                int type;
+                
                 switch (qp.getType()) {
                 case Leader.ACK:
                     leader.processAck(qp.getZxid(), s.getLocalSocketAddress());
@@ -258,11 +266,14 @@ public void run() {
                     queuedPackets.add(qp);
                     break;
                 case Leader.REQUEST:
-                    ByteBuffer bb = ByteBuffer.wrap(qp.getData());
-                    long sessionId = bb.getLong();
-                    int cxid = bb.getInt();
-                    int type = bb.getInt();
+                    bb = ByteBuffer.wrap(qp.getData());
+                    sessionId = bb.getLong();
+                    cxid = bb.getInt();
+                    type = bb.getInt();
                     bb = bb.slice();
+                    if(type == OpCode.sync){
+                    	leader.setSyncHandler(this, sessionId);
+                    }
                     leader.zk.submitRequest(null, sessionId, type, cxid, bb,
                             qp.getAuthinfo());
                     break;
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerRequestProcessor.java b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerRequestProcessor.java
index 154bbc77a..855ea5e0e 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerRequestProcessor.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerRequestProcessor.java
@@ -61,6 +61,7 @@ public void run() {
                 case OpCode.create:
                 case OpCode.delete:
                 case OpCode.setData:
+                case OpCode.sync:
                 case OpCode.setACL:
                 case OpCode.createSession:
                 case OpCode.closeSession:
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerZooKeeperServer.java b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerZooKeeperServer.java
index da95337c9..9cb7fec83 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerZooKeeperServer.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerZooKeeperServer.java
@@ -122,7 +122,17 @@ public void commit(long zxid) {
         Request request = pendingTxns.remove();
         commitProcessor.commit(request);
     }
-
+    
+    public void sync(){
+    	if(commitProcessor.pendingSyncs.size() ==0){
+    		ZooLog.logWarn("Not expecting a sync.");
+    		return;
+    	}
+    	    	
+    	commitProcessor.commit(commitProcessor.pendingSyncs.remove());
+    }
+    	     
+    	 
     @Override
     public int getGlobalOutstandingLimit() {
         return super.getGlobalOutstandingLimit()
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/Leader.java b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/Leader.java
index 468cd857e..9e88c2628 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/Leader.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/Leader.java
@@ -23,6 +23,7 @@
 import java.net.Socket;
 import java.net.SocketAddress;
 import java.util.HashSet;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.concurrent.ConcurrentLinkedQueue;
 
@@ -32,6 +33,7 @@
 import com.yahoo.zookeeper.server.RequestProcessor;
 import com.yahoo.zookeeper.server.ZooLog;
 import com.yahoo.zookeeper.server.quorum.QuorumPeer.ServerState;
+import com.yahoo.zookeeper.ZooDefs.OpCode;
 
 /**
  * This class has the control logic for the Leader.
@@ -58,7 +60,13 @@ public String toString() {
 
     // list of followers that are ready to follow (i.e synced with the leader)
     public HashSet<FollowerHandler> forwardingFollowers = new HashSet<FollowerHandler>();
-
+    
+    //Pending sync requests
+    public HashMap<Long,Request> pendingSyncs = new HashMap<Long,Request>();
+               
+    //Map sync request to FollowerHandler
+    public HashMap<Long,FollowerHandler> syncHandler = new HashMap<Long,FollowerHandler>();
+       
     /**
      * Adds follower to the leader.
      * 
@@ -149,6 +157,12 @@ void removeFollowerHandler(FollowerHandler follower) {
      */
     final static int REVALIDATE = 6;
 
+    /**
+     * This message is a reply to a synchronize command flushing the pipe
+     * between the leader and the follower.
+     */
+    final static int SYNC = 7;
+     
     private ConcurrentLinkedQueue<Proposal> outstandingProposals = new ConcurrentLinkedQueue<Proposal>();
 
     ConcurrentLinkedQueue<Proposal> toBeApplied = new ConcurrentLinkedQueue<Proposal>();
@@ -321,7 +335,7 @@ synchronized public void processAck(long zxid, SocketAddress followerAddr) {
                 p.ackCount++;
                 // ZooLog.logException(new RuntimeException(), "Count for " +
                 // Long.toHexString(zxid) + " is " + p.ackCount);
-                if (p.ackCount > self.quorumPeers.size() / 2) {
+                if (p.ackCount > self.quorumPeers.size() / 2){
                     if (!first) {
                         ZooLog.logError("Commiting " + Long.toHexString(zxid)
                                 + " from " + followerAddr + " not first!");
@@ -429,6 +443,12 @@ public void commit(long zxid) {
         lastCommitted = zxid;
         QuorumPacket qp = new QuorumPacket(Leader.COMMIT, zxid, null, null);
         sendPacket(qp);
+               
+        if(pendingSyncs.containsKey(zxid)){
+        	sendSync(syncHandler.get(pendingSyncs.get(zxid).sessionId), pendingSyncs.get(zxid));
+        	syncHandler.remove(pendingSyncs.get(zxid));
+        	pendingSyncs.remove(zxid);
+        }
     }
 
     long lastProposed;
@@ -440,20 +460,23 @@ public void commit(long zxid) {
      * @return the proposal that is queued to send to all the members
      */
     public Proposal propose(Request request) {
-        ByteArrayOutputStream baos = new ByteArrayOutputStream();
-        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);
-        try {
-            request.hdr.serialize(boa, "hdr");
-            if (request.txn != null) {
-                request.txn.serialize(boa, "txn");
-            }
-            baos.close();
-        } catch (IOException e) {
-            // This really should be impossible
-            ZooLog.logException(e);
-        }
-        QuorumPacket pp = new QuorumPacket(Leader.PROPOSAL, request.zxid, baos
+    	
+    	
+    	ByteArrayOutputStream baos = new ByteArrayOutputStream();
+    	BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);
+    	try {
+    		request.hdr.serialize(boa, "hdr");
+    		if (request.txn != null) {
+    			request.txn.serialize(boa, "txn");
+    		}
+    		baos.close();
+    	} catch (IOException e) {
+    		// This really should be impossible
+    		ZooLog.logException(e);
+    	}
+    	QuorumPacket pp = new QuorumPacket(Leader.PROPOSAL, request.zxid, baos
                 .toByteArray(), null);
+    	
         Proposal p = new Proposal();
         p.packet = pp;
         p.request = request;
@@ -464,7 +487,48 @@ public Proposal propose(Request request) {
         }
         return p;
     }
-
+            
+    /**
+     * Process sync requests
+     * 
+     * @param QuorumPacket p
+     * @return void
+     */
+    
+    public void processSync(Request r){
+    	if(outstandingProposals.isEmpty()){
+    		ZooLog.logWarn("No outstanding proposal");
+    		sendSync(syncHandler.get(r.sessionId), r);
+    			syncHandler.remove(r.sessionId);
+    	}
+    	else{
+    		pendingSyncs.put(lastProposed, r);
+    	}
+    }
+        
+    /**
+     * Set FollowerHandler for sync.
+     * 
+     * @param QuorumPacket p
+     * @return void
+     */
+        
+    synchronized public void setSyncHandler(FollowerHandler f, long s){
+    	syncHandler.put(s, f);
+    }
+            
+    /**
+     * Sends a sync message to the appropriate server
+     * 
+     * @param request
+     * @return void
+     */
+            
+    public void sendSync(FollowerHandler f, Request r){
+    	QuorumPacket qp = new QuorumPacket(Leader.SYNC, 0, null, null);
+    	f.queuePacket(qp);
+    }
+                
     /**
      * lets the leader know that a follower is capable of following and is done
      * syncing
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/ProposalRequestProcessor.java b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/ProposalRequestProcessor.java
index e68188d7c..64dea303d 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/ProposalRequestProcessor.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/ProposalRequestProcessor.java
@@ -16,6 +16,7 @@
 
 package com.yahoo.zookeeper.server.quorum;
 
+import com.yahoo.zookeeper.ZooDefs;
 import com.yahoo.zookeeper.server.Request;
 import com.yahoo.zookeeper.server.RequestProcessor;
 import com.yahoo.zookeeper.server.SyncRequestProcessor;
@@ -43,12 +44,25 @@ public void processRequest(Request request) {
         // ZooLog.logWarn("Ack>>> cxid = " + request.cxid + " type = " +
         // request.type + " id = " + request.sessionId);
         // request.addRQRec(">prop");
-        nextProcessor.processRequest(request);
-        if (request.hdr != null) {
-            // We need to sync and get consensus on any transactions
-            zks.leader.propose(request);
-            syncProcessor.processRequest(request);
-        }
+    	    	
+    	
+    	if(request.type == ZooDefs.OpCode.sync){
+    		if(zks.leader.syncHandler.containsKey(request.sessionId)){
+    			zks.leader.processSync(request);
+    		}
+    		else{
+    			nextProcessor.processRequest(request);
+    			zks.commitProcessor.commit(request);
+    		}
+    	}
+    	else{
+    		nextProcessor.processRequest(request);
+    		if (request.hdr != null) {
+    			// We need to sync and get consensus on any transactions
+    			zks.leader.propose(request);
+    			syncProcessor.processRequest(request);
+    		}
+    	}
     }
 
     public void shutdown() {
diff --git a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/SendAckRequestProcessor.java b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/SendAckRequestProcessor.java
index 61fb7fac7..0d81f37e4 100644
--- a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/SendAckRequestProcessor.java
+++ b/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/SendAckRequestProcessor.java
@@ -18,6 +18,7 @@
 
 import java.io.IOException;
 
+import com.yahoo.zookeeper.ZooDefs.OpCode;
 import com.yahoo.zookeeper.server.Request;
 import com.yahoo.zookeeper.server.RequestProcessor;
 import com.yahoo.zookeeper.server.ZooLog;
@@ -30,13 +31,15 @@ public class SendAckRequestProcessor implements RequestProcessor {
     }
 
     public void processRequest(Request si) {
-        QuorumPacket qp = new QuorumPacket(Leader.ACK, si.hdr.getZxid(), null,
+    	if(si.type != OpCode.sync){
+    		QuorumPacket qp = new QuorumPacket(Leader.ACK, si.hdr.getZxid(), null,
                 null);
-        try {
-            follower.writePacket(qp);
-        } catch (IOException e) {
-            ZooLog.logException(e);
-        }
+    		try {
+    			follower.writePacket(qp);
+    		} catch (IOException e) {
+    			ZooLog.logException(e);
+    		}
+    	}
     }
 
     public void shutdown() {
diff --git a/zookeeper/zookeeper.jute b/zookeeper/zookeeper.jute
index 441d360b3..eb8afc2eb 100755
--- a/zookeeper/zookeeper.jute
+++ b/zookeeper/zookeeper.jute
@@ -87,6 +87,12 @@ module com.yahoo.zookeeper.proto {
     class SetMaxChildrenRequest {
         ustring path;
         int max;
+    }
+	class SyncRequest {
+        ustring path;
+    }
+    class SyncResponse {
+        ustring path;
     }
     class GetACLRequest {
         ustring path;
