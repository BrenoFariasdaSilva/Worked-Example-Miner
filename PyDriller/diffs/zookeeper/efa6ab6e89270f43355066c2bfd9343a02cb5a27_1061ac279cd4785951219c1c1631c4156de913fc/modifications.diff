diff --git a/zookeeper/java/src/com/yahoo/jute/compiler/CGenerator.java b/zookeeper/java/src/com/yahoo/jute/compiler/CGenerator.java
index c9d390969..ca331039f 100644
--- a/zookeeper/java/src/com/yahoo/jute/compiler/CGenerator.java
+++ b/zookeeper/java/src/com/yahoo/jute/compiler/CGenerator.java
@@ -62,9 +62,10 @@ void genCode() throws IOException {
         h.write("#include \"recordio.h\"\n");
         for (Iterator i = mInclFiles.iterator(); i.hasNext();) {
             JFile f = (JFile) i.next();
-            h.write("#include \""+f.getName()+".hh\"\n");
+            h.write("#include \""+f.getName()+".h\"\n");
         }
-        c.write("#include \""+mName+".h\"\n");
+        c.write("#include <stdlib.h>\n"); // need it for calloc() & free()
+        c.write("#include \""+mName+".h\"\n\n");
         
         for (Iterator i = mRecList.iterator(); i.hasNext();) {
             JRecord jr = (JRecord) i.next();
diff --git a/zookeeper/java/src/com/yahoo/jute/compiler/JBoolean.java b/zookeeper/java/src/com/yahoo/jute/compiler/JBoolean.java
index b956c191f..a8d8a0e8c 100755
--- a/zookeeper/java/src/com/yahoo/jute/compiler/JBoolean.java
+++ b/zookeeper/java/src/com/yahoo/jute/compiler/JBoolean.java
@@ -26,7 +26,7 @@ public class JBoolean extends JType {
     
     /** Creates a new instance of JBoolean */
     public JBoolean() {
-        super("int", "bool", "boolean", "Bool", "Boolean", "toBoolean");
+        super("int32_t", "bool", "boolean", "Bool", "Boolean", "toBoolean");
     }
     
     public String getSignature() {
diff --git a/zookeeper/java/src/com/yahoo/jute/compiler/JRecord.java b/zookeeper/java/src/com/yahoo/jute/compiler/JRecord.java
index cea95f3d2..50d48f376 100755
--- a/zookeeper/java/src/com/yahoo/jute/compiler/JRecord.java
+++ b/zookeeper/java/src/com/yahoo/jute/compiler/JRecord.java
@@ -114,12 +114,12 @@ public void genCCode(FileWriter h, FileWriter c) throws IOException {
 				String struct_name = JVector.extractVectorName(jvType);
 				if (vectorStructs.get(struct_name) == null) {
 					vectorStructs.put(struct_name, struct_name);
-					h.write("struct " + struct_name + " {\n    int count;\n" + jv.getElementType().genCDecl("*data") + ";\n};\n");
+					h.write("struct " + struct_name + " {\n    int32_t count;\n" + jv.getElementType().genCDecl("*data") + ";\n};\n");
 					h.write("int serialize_" + struct_name + "(struct oarchive *out, const char *tag, struct " + struct_name + " *v);\n");
 					h.write("int deserialize_" + struct_name + "(struct iarchive *in, const char *tag, struct " + struct_name + " *v);\n");
-					h.write("int allocate_" + struct_name + "(struct " + struct_name + " *v, int len);\n");
+					h.write("int allocate_" + struct_name + "(struct " + struct_name + " *v, int32_t len);\n");
 					h.write("int deallocate_" + struct_name + "(struct " + struct_name + " *v);\n");
-					c.write("int allocate_" + struct_name + "(struct " + struct_name + " *v, int len) {\n");
+					c.write("int allocate_" + struct_name + "(struct " + struct_name + " *v, int32_t len) {\n");
 					c.write("    if (!len) {\n");
 					c.write("        v->count = 0;\n");
 					c.write("        v->data = 0;\n");
@@ -131,7 +131,7 @@ public void genCCode(FileWriter h, FileWriter c) throws IOException {
 					c.write("}\n");
 					c.write("int deallocate_" + struct_name + "(struct " + struct_name + " *v) {\n");
 					c.write("    if (v->data) {\n");
-					c.write("        int i;\n");
+					c.write("        int32_t i;\n");
 					c.write("        for(i=0;i<v->count; i++) {\n");
 					c.write("            deallocate_"+JRecord.extractMethodSuffix(jvType)+"(&v->data[i]);\n");
 					c.write("        }\n");
@@ -142,9 +142,9 @@ public void genCCode(FileWriter h, FileWriter c) throws IOException {
 					c.write("}\n");
 					c.write("int serialize_" + struct_name + "(struct oarchive *out, const char *tag, struct " + struct_name + " *v)\n");
 					c.write("{\n");
-					c.write("    int count = v->count;\n");
+					c.write("    int32_t count = v->count;\n");
 					c.write("    int rc = 0;\n");
-					c.write("    int i;\n");
+					c.write("    int32_t i;\n");
 					c.write("    rc = out->start_vector(out, tag, &count);\n");
 					c.write("    for(i=0;i<v->count;i++) {\n");
 					genSerialize(c, jvType, "data", "data[i]");
@@ -155,7 +155,7 @@ public void genCCode(FileWriter h, FileWriter c) throws IOException {
 					c.write("int deserialize_" + struct_name + "(struct iarchive *in, const char *tag, struct " + struct_name + " *v)\n");
 					c.write("{\n");
 					c.write("    int rc = 0;\n");
-					c.write("    int i;\n");
+					c.write("    int32_t i;\n");
 					c.write("    rc = in->start_vector(in, tag, &v->count);\n");
 					c.write("    v->data = calloc(v->count, sizeof(*v->data));\n");
 					c.write("    for(i=0;i<v->count;i++) {\n");
